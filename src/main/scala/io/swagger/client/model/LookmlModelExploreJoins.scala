/**
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model


case class LookmlModelExploreJoins (
  // Name of this join (and name of the view to join)
  name: Option[String] = None,
  // Fields referenced by the join
  dependentFields: Option[List[String]] = None,
  // Fields of the joined view to pull into this explore
  fields: Option[List[String]] = None,
  // Name of the dimension in this explore whose value is in the primary key of the joined view
  foreignKey: Option[String] = None,
  // Name of view to join
  from: Option[String] = None,
  // Specifies whether all queries must use an outer join
  outerOnly: Option[Boolean] = None,
  // many_to_one, one_to_one, one_to_many, many_to_many
  relationship: Option[String] = None,
  // Names of joins that must always be included in SQL queries
  requiredJoins: Option[List[String]] = None,
  // SQL expression that produces a foreign key
  sqlForeignKey: Option[String] = None,
  // SQL ON expression describing the join condition
  sqlOn: Option[String] = None,
  // SQL table name to join
  sqlTableName: Option[String] = None,
  // The join type: left_outer, full_outer, inner, or cross
  `type`: Option[String] = None,
  // Label to display in UI selectors
  viewLabel: Option[String] = None
)

