/**
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model


case class LDAPConfig (
  // Enable/Disable LDAP authentication for the server
  enabled: Option[Boolean] = None,
  // LDAP server hostname
  connectionHost: Option[String] = None,
  // LDAP host port
  connectionPort: Option[String] = None,
  // Use Transport Layer Security
  connectionTls: Option[Boolean] = None,
  // Do not verify peer when using TLS
  connectionTlsNoVerify: Option[Boolean] = None,
  // Distinguished name of LDAP account used to access the LDAP server
  authUsername: Option[String] = None,
  // (Write-Only)  Password for the LDAP account used to access the LDAP server
  authPassword: Option[String] = None,
  // (Read-only) Has the password been set for the LDAP account used to access the LDAP server
  hasAuthPassword: Option[Boolean] = None,
  // Distinguished name of LDAP node used as the base for user searches
  userBindBaseDn: Option[String] = None,
  // Name(s) of user record attributes used for matching user login id (comma separated list)
  userIdAttributeNames: Option[String] = None,
  // (Optional) Name of user record objectclass used for finding user during login id
  userObjectclass: Option[String] = None,
  // (Optional) Custom RFC-2254 filter clause for use in finding user during login. Combined via 'and' with the other generated filter clauses.
  userCustomFilter: Option[String] = None,
  // Name of user record attributes used to indicate email address field
  userAttributeMapEmail: Option[String] = None,
  // Name of user record attributes used to indicate first name
  userAttributeMapFirstName: Option[String] = None,
  // Name of user record attributes used to indicate last name
  userAttributeMapLastName: Option[String] = None,
  // Name of user record attributes used to indicate unique record id
  userAttributeMapLdapId: Option[String] = None,
  // Merge first-time ldap login to existing user account by email addresses. When a user logs in for the first time via ldap this option will connect this user into their existing account by finding the account with a matching email address. Otherwise a new user account will be created for the user.
  mergeNewUsersByEmail: Option[Boolean] = None,
  // Allow alternate email-based login via '/login/email' for admins and for specified users with the 'login_special_email' permission. This option is useful as a fallback during ldap setup, if ldap config problems occur later, or if you need to support some users who are not in your ldap directory. Looker email/password logins are always disabled for regular users when ldap is enabled.
  alternateEmailLoginAllowed: Option[Boolean] = None,
  // When this config was last modified
  modifiedAt: Option[String] = None,
  // User id of user who last modified this config
  modifiedBy: Option[String] = None,
  // (Read-only) Groups that will be applied to new users the first time they login via LDAP
  defaultNewUserGroups: Option[List[Group]] = None,
  // (Read-only) Roles that will be applied to new users the first time they login via LDAP
  defaultNewUserRoles: Option[List[Role]] = None,
  // (Write-Only)  Array of ids of roles that will be applied to new users the first time they login via LDAP
  defaultNewUserRoleIds: Option[List[Long]] = None,
  // (Write-Only)  Array of ids of groups that will be applied to new users the first time they login via LDAP
  defaultNewUserGroupIds: Option[List[Long]] = None,
  // Set user roles in Looker based on groups from LDAP
  setRolesFromGroups: Option[Boolean] = None,
  // (Read-only) Array of mappings between LDAP Groups and Looker Roles
  groups: Option[List[LDAPGroupRead]] = None,
  // (Read/Write) Array of mappings between LDAP Groups and arrays of Looker Role ids
  groupsWithRoleIds: Option[List[LDAPGroupWrite]] = None,
  // Users will not be allowed to login at all unless a role for them is found in LDAP if set to true
  authRequiresRole: Option[Boolean] = None,
  // Identifier for a strategy for how Looker will search for groups in the LDAP server
  groupsFinderType: Option[String] = None,
  // Base dn for finding groups in LDAP searches
  groupsBaseDn: Option[String] = None,
  // LDAP Group attribute that signifies the members of the groups. Most commonly 'member'
  groupsMemberAttribute: Option[String] = None,
  // LDAP Group attribute that signifies the user in a group. Most commonly 'dn'
  groupsUserAttribute: Option[String] = None,
  // Optional comma-separated list of supported LDAP objectclass for groups when doing groups searches
  groupsObjectclasses: Option[String] = None,
  // Don't attempt to do LDAP search result paging (RFC 2696) even if the LDAP server claims to support it.
  forceNoPage: Option[Boolean] = None,
  // (Write-Only)  Test LDAP user login id. For ldap tests only.
  testLdapUser: Option[String] = None,
  // (Write-Only)  Test LDAP user password. For ldap tests only.
  testLdapPassword: Option[String] = None,
  // (Read-only) Array of mappings between LDAP User Attributes and Looker User Attributes
  userAttributes: Option[List[LDAPUserAttributeRead]] = None,
  // (Read/Write) Array of mappings between LDAP User Attributes and arrays of Looker User Attribute ids
  userAttributesWithIds: Option[List[LDAPUserAttributeWrite]] = None,
  // Link to get this item
  url: Option[String] = None,
  // Operations the current user is able to perform on this object
  can: Option[Map[String, Boolean]] = None
)

