/**
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model


case class OIDCConfig (
  // Enable/Disable OIDC authentication for the server
  enabled: Option[Boolean] = None,
  // Relying Party Identifier (provided by OpenID Provider)
  identifier: Option[String] = None,
  // (Write-Only) Relying Party Secret (provided by OpenID Provider)
  secret: Option[String] = None,
  // Array of scopes to request.
  scopes: Option[List[String]] = None,
  // OpenID Provider Issuer
  issuer: Option[String] = None,
  // OpenID Provider Audience
  audience: Option[String] = None,
  // OpenID Provider Authorization Url
  authorizationEndpoint: Option[String] = None,
  // OpenID Provider Token Url
  tokenEndpoint: Option[String] = None,
  // OpenID Provider User Information Url
  userinfoEndpoint: Option[String] = None,
  // Name of user record attributes used to indicate email address field
  userAttributeMapEmail: Option[String] = None,
  // Name of user record attributes used to indicate first name
  userAttributeMapFirstName: Option[String] = None,
  // Name of user record attributes used to indicate last name
  userAttributeMapLastName: Option[String] = None,
  // Merge first-time oidc login to existing user account by email addresses. When a user logs in for the first time via oidc this option will connect this user into their existing account by finding the account with a matching email address by testing the given types of credentials for existing users. Otherwise a new user account will be created for the user. This list (if provided) must be a comma separated list of string like 'email,ldap,google'
  newUserMigrationTypes: Option[String] = None,
  // Allow alternate email-based login via '/login/email' for admins and for specified users with the 'login_special_email' permission. This option is useful as a fallback during ldap setup, if ldap config problems occur later, or if you need to support some users who are not in your ldap directory. Looker email/password logins are always disabled for regular users when ldap is enabled.
  alternateEmailLoginAllowed: Option[Boolean] = None,
  // Slug to identify configurations that are created in order to run a OIDC config test
  testSlug: Option[String] = None,
  // When this config was last modified
  modifiedAt: Option[String] = None,
  // User id of user who last modified this config
  modifiedBy: Option[String] = None,
  // (Read-only) Roles that will be applied to new users the first time they login via OIDC
  defaultNewUserRoles: Option[List[Role]] = None,
  // (Read-only) Groups that will be applied to new users the first time they login via OIDC
  defaultNewUserGroups: Option[List[Group]] = None,
  // (Write-Only) Array of ids of roles that will be applied to new users the first time they login via OIDC
  defaultNewUserRoleIds: Option[List[Long]] = None,
  // (Write-Only) Array of ids of groups that will be applied to new users the first time they login via OIDC
  defaultNewUserGroupIds: Option[List[Long]] = None,
  // Set user roles in Looker based on groups from OIDC
  setRolesFromGroups: Option[Boolean] = None,
  // Name of user record attributes used to indicate groups. Used when 'groups_finder_type' is set to 'grouped_attribute_values'
  groupsAttribute: Option[String] = None,
  // (Read-only) Array of mappings between OIDC Groups and Looker Roles
  groups: Option[List[OIDCGroupRead]] = None,
  // (Read/Write) Array of mappings between OIDC Groups and arrays of Looker Role ids
  groupsWithRoleIds: Option[List[OIDCGroupWrite]] = None,
  // Users will not be allowed to login at all unless a role for them is found in OIDC if set to true
  authRequiresRole: Option[Boolean] = None,
  // (Read-only) Array of mappings between OIDC User Attributes and Looker User Attributes
  userAttributes: Option[List[OIDCUserAttributeRead]] = None,
  // (Read/Write) Array of mappings between OIDC User Attributes and arrays of Looker User Attribute ids
  userAttributesWithIds: Option[List[OIDCUserAttributeWrite]] = None,
  // Link to get this item
  url: Option[String] = None,
  // Operations the current user is able to perform on this object
  can: Option[Map[String, Boolean]] = None
)

