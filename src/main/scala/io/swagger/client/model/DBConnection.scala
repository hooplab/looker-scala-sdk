/**
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model


case class DBConnection (
  // Name of the connection. Also used as the unique identifier
  name: Option[String] = None,
  // (Read-only) SQL Dialect details
  dialect: Option[Dialect] = None,
  // SQL Runner snippets for this connection
  snippets: Option[List[Snippet]] = None,
  // Host name/address of server
  host: Option[String] = None,
  // Port number on server
  port: Option[String] = None,
  // Username for server authentication
  username: Option[String] = None,
  // (Write-Only) Password for server authentication
  password: Option[String] = None,
  // (Write-Only) Base64 encoded Certificate body for server authentication (when appropriate for dialect).
  certificate: Option[String] = None,
  // (Write-Only) Certificate keyfile type - .json or .p12
  fileType: Option[String] = None,
  // Database name
  database: Option[String] = None,
  // Time zone of database
  dbTimezone: Option[String] = None,
  // Timezone to use in queries
  queryTimezone: Option[String] = None,
  // Scheme name
  schema: Option[String] = None,
  // Maximum number of concurrent connection to use
  maxConnections: Option[Long] = None,
  // Maximum size of query in GBs (BigQuery only, can be a user_attribute name)
  maxBillingGigabytes: Option[String] = None,
  // Use SSL/TLS when connecting to server
  ssl: Option[Boolean] = None,
  // Verify the SSL
  verifySsl: Option[Boolean] = None,
  // Name of temporary database (if used)
  tmpDbName: Option[String] = None,
  // Additional params to add to JDBC connection string
  jdbcAdditionalParams: Option[String] = None,
  // Pool Timeout
  poolTimeout: Option[Long] = None,
  // (Read/Write) SQL Dialect name
  dialectName: Option[String] = None,
  // Creation date for this connection
  createdAt: Option[String] = None,
  // Id of user who last modified this connection configuration
  userId: Option[String] = None,
  // Is this an example connection
  example: Option[Boolean] = None,
  // (Limited access feature) Are per user db credentials enabled
  userDbCredentials: Option[Boolean] = None,
  // Fields whose values map to user attribute names
  userAttributeFields: Option[List[String]] = None,
  // Cron string specifying when maintenance such as PDT trigger checks and drops should be performed
  maintenanceCron: Option[String] = None,
  // Unix timestamp at start of last completed PDT trigger check process
  lastRegenAt: Option[String] = None,
  // Unix timestamp at start of last completed PDT reap process
  lastReapAt: Option[String] = None,
  // Precache tables in the SQL Runner
  sqlRunnerPrecacheTables: Option[Boolean] = None,
  // SQL statements (semicolon separated) to issue after connecting to the database. Requires `custom_after_connect_statements` license feature
  afterConnectStatements: Option[String] = None,
  // db_connection_override for this connection in the `pdt` maintenance context
  pdtContextOverride: Option[DBConnectionOverride] = None,
  // Operations the current user is able to perform on this object
  can: Option[Map[String, Boolean]] = None
)

