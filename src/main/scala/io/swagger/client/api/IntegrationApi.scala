/**
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api

import java.text.SimpleDateFormat

import io.swagger.client.model.DataActionForm
import io.swagger.client.model.Error
import io.swagger.client.model.Integration
import io.swagger.client.model.IntegrationHub
import io.swagger.client.model.ValidationError
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class IntegrationApi(
  val defBasePath: String = "https://hoopla.eu.looker.com:19999/api/3.0",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new IntegrationApiAsyncHelper(client, config)

  /**
   * Accept Integration Hub Legal Agreement
   * Accepts the legal agreement for a given integration hub. This only works for integration hubs that have legal_agreement_required set to true and legal_agreement_signed set to false.
   *
   * @param integrationHubId Id of integration_hub 
   * @return IntegrationHub
   */
  def acceptIntegrationHubLegalAgreement(integrationHubId: Long): Option[IntegrationHub] = {
    val await = Try(Await.result(acceptIntegrationHubLegalAgreementAsync(integrationHubId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Accept Integration Hub Legal Agreement asynchronously
   * Accepts the legal agreement for a given integration hub. This only works for integration hubs that have legal_agreement_required set to true and legal_agreement_signed set to false.
   *
   * @param integrationHubId Id of integration_hub 
   * @return Future(IntegrationHub)
   */
  def acceptIntegrationHubLegalAgreementAsync(integrationHubId: Long): Future[IntegrationHub] = {
      helper.acceptIntegrationHubLegalAgreement(integrationHubId)
  }

  /**
   * Get All Integration Hubs
   * ### Get information about all Integration Hubs. 
   *
   * @param fields Requested fields. (optional)
   * @return List[IntegrationHub]
   */
  def allIntegrationHubs(fields: Option[String] = None): Option[List[IntegrationHub]] = {
    val await = Try(Await.result(allIntegrationHubsAsync(fields), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get All Integration Hubs asynchronously
   * ### Get information about all Integration Hubs. 
   *
   * @param fields Requested fields. (optional)
   * @return Future(List[IntegrationHub])
   */
  def allIntegrationHubsAsync(fields: Option[String] = None): Future[List[IntegrationHub]] = {
      helper.allIntegrationHubs(fields)
  }

  /**
   * Get All Integrations
   * ### Get information about all Integrations. 
   *
   * @param fields Requested fields. (optional)
   * @param integrationHubId Filter to a specific provider (optional)
   * @return List[Integration]
   */
  def allIntegrations(fields: Option[String] = None, integrationHubId: Option[String] = None): Option[List[Integration]] = {
    val await = Try(Await.result(allIntegrationsAsync(fields, integrationHubId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get All Integrations asynchronously
   * ### Get information about all Integrations. 
   *
   * @param fields Requested fields. (optional)
   * @param integrationHubId Filter to a specific provider (optional)
   * @return Future(List[Integration])
   */
  def allIntegrationsAsync(fields: Option[String] = None, integrationHubId: Option[String] = None): Future[List[Integration]] = {
      helper.allIntegrations(fields, integrationHubId)
  }

  /**
   * Create Integration Hub
   * ### Create a new Integration Hub. 
   *
   * @param body Integration Hub (optional)
   * @param fields Requested fields. (optional)
   * @return IntegrationHub
   */
  def createIntegrationHub(body: Option[IntegrationHub] = None, fields: Option[String] = None): Option[IntegrationHub] = {
    val await = Try(Await.result(createIntegrationHubAsync(body, fields), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Create Integration Hub asynchronously
   * ### Create a new Integration Hub. 
   *
   * @param body Integration Hub (optional)
   * @param fields Requested fields. (optional)
   * @return Future(IntegrationHub)
   */
  def createIntegrationHubAsync(body: Option[IntegrationHub] = None, fields: Option[String] = None): Future[IntegrationHub] = {
      helper.createIntegrationHub(body, fields)
  }

  /**
   * Delete Integration Hub
   * ### Delete a Integration Hub. 
   *
   * @param integrationHubId Id of integration_hub 
   * @return String
   */
  def deleteIntegrationHub(integrationHubId: Long): Option[String] = {
    val await = Try(Await.result(deleteIntegrationHubAsync(integrationHubId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Delete Integration Hub asynchronously
   * ### Delete a Integration Hub. 
   *
   * @param integrationHubId Id of integration_hub 
   * @return Future(String)
   */
  def deleteIntegrationHubAsync(integrationHubId: Long): Future[String] = {
      helper.deleteIntegrationHub(integrationHubId)
  }

  /**
   * Fetch Remote Integration Form
   * Returns the Integration form for presentation to the user.
   *
   * @param integrationId Id of Integration 
   * @return DataActionForm
   */
  def fetchIntegrationForm(integrationId: Long): Option[DataActionForm] = {
    val await = Try(Await.result(fetchIntegrationFormAsync(integrationId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Fetch Remote Integration Form asynchronously
   * Returns the Integration form for presentation to the user.
   *
   * @param integrationId Id of Integration 
   * @return Future(DataActionForm)
   */
  def fetchIntegrationFormAsync(integrationId: Long): Future[DataActionForm] = {
      helper.fetchIntegrationForm(integrationId)
  }

  /**
   * Get Integration
   * ### Get information about a Integration. 
   *
   * @param integrationId Id of Integration 
   * @param fields Requested fields. (optional)
   * @return Integration
   */
  def integration(integrationId: Long, fields: Option[String] = None): Option[Integration] = {
    val await = Try(Await.result(integrationAsync(integrationId, fields), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get Integration asynchronously
   * ### Get information about a Integration. 
   *
   * @param integrationId Id of Integration 
   * @param fields Requested fields. (optional)
   * @return Future(Integration)
   */
  def integrationAsync(integrationId: Long, fields: Option[String] = None): Future[Integration] = {
      helper.integration(integrationId, fields)
  }

  /**
   * Get Integration Hub
   * ### Get information about a Integration Hub. 
   *
   * @param integrationHubId Id of Integration Hub 
   * @param fields Requested fields. (optional)
   * @return IntegrationHub
   */
  def integrationHub(integrationHubId: Long, fields: Option[String] = None): Option[IntegrationHub] = {
    val await = Try(Await.result(integrationHubAsync(integrationHubId, fields), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get Integration Hub asynchronously
   * ### Get information about a Integration Hub. 
   *
   * @param integrationHubId Id of Integration Hub 
   * @param fields Requested fields. (optional)
   * @return Future(IntegrationHub)
   */
  def integrationHubAsync(integrationHubId: Long, fields: Option[String] = None): Future[IntegrationHub] = {
      helper.integrationHub(integrationHubId, fields)
  }

  /**
   * Update Integration
   * ### Update parameters on a Integration. 
   *
   * @param integrationId Id of Integration 
   * @param body Integration 
   * @param fields Requested fields. (optional)
   * @return Integration
   */
  def updateIntegration(integrationId: Long, body: Integration, fields: Option[String] = None): Option[Integration] = {
    val await = Try(Await.result(updateIntegrationAsync(integrationId, body, fields), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Update Integration asynchronously
   * ### Update parameters on a Integration. 
   *
   * @param integrationId Id of Integration 
   * @param body Integration 
   * @param fields Requested fields. (optional)
   * @return Future(Integration)
   */
  def updateIntegrationAsync(integrationId: Long, body: Integration, fields: Option[String] = None): Future[Integration] = {
      helper.updateIntegration(integrationId, body, fields)
  }

  /**
   * Update Integration Hub
   * ### Update a Integration Hub definition. 
   *
   * @param integrationHubId Id of Integration Hub 
   * @param body Integration Hub 
   * @param fields Requested fields. (optional)
   * @return IntegrationHub
   */
  def updateIntegrationHub(integrationHubId: Long, body: IntegrationHub, fields: Option[String] = None): Option[IntegrationHub] = {
    val await = Try(Await.result(updateIntegrationHubAsync(integrationHubId, body, fields), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Update Integration Hub asynchronously
   * ### Update a Integration Hub definition. 
   *
   * @param integrationHubId Id of Integration Hub 
   * @param body Integration Hub 
   * @param fields Requested fields. (optional)
   * @return Future(IntegrationHub)
   */
  def updateIntegrationHubAsync(integrationHubId: Long, body: IntegrationHub, fields: Option[String] = None): Future[IntegrationHub] = {
      helper.updateIntegrationHub(integrationHubId, body, fields)
  }

}

class IntegrationApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def acceptIntegrationHubLegalAgreement(integrationHubId: Long)(implicit reader: ClientResponseReader[IntegrationHub]): Future[IntegrationHub] = {
    // create path and map variables
    val path = (addFmt("/integration_hubs/{integration_hub_id}/accept_legal_agreement")
      replaceAll("\\{" + "integration_hub_id" + "\\}", integrationHubId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def allIntegrationHubs(fields: Option[String] = None
    )(implicit reader: ClientResponseReader[List[IntegrationHub]]): Future[List[IntegrationHub]] = {
    // create path and map variables
    val path = (addFmt("/integration_hubs"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    fields match {
      case Some(param) => queryParams += "fields" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def allIntegrations(fields: Option[String] = None,
    integrationHubId: Option[String] = None
    )(implicit reader: ClientResponseReader[List[Integration]]): Future[List[Integration]] = {
    // create path and map variables
    val path = (addFmt("/integrations"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    fields match {
      case Some(param) => queryParams += "fields" -> param.toString
      case _ => queryParams
    }
    integrationHubId match {
      case Some(param) => queryParams += "integration_hub_id" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def createIntegrationHub(body: Option[IntegrationHub] = None,
    fields: Option[String] = None
    )(implicit reader: ClientResponseReader[IntegrationHub], writer: RequestWriter[Option[IntegrationHub]]): Future[IntegrationHub] = {
    // create path and map variables
    val path = (addFmt("/integration_hubs"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    fields match {
      case Some(param) => queryParams += "fields" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def deleteIntegrationHub(integrationHubId: Long)(implicit reader: ClientResponseReader[String]): Future[String] = {
    // create path and map variables
    val path = (addFmt("/integration_hubs/{integration_hub_id}")
      replaceAll("\\{" + "integration_hub_id" + "\\}", integrationHubId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def fetchIntegrationForm(integrationId: Long)(implicit reader: ClientResponseReader[DataActionForm]): Future[DataActionForm] = {
    // create path and map variables
    val path = (addFmt("/integrations/{integration_id}/form")
      replaceAll("\\{" + "integration_id" + "\\}", integrationId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def integration(integrationId: Long,
    fields: Option[String] = None
    )(implicit reader: ClientResponseReader[Integration]): Future[Integration] = {
    // create path and map variables
    val path = (addFmt("/integrations/{integration_id}")
      replaceAll("\\{" + "integration_id" + "\\}", integrationId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    fields match {
      case Some(param) => queryParams += "fields" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def integrationHub(integrationHubId: Long,
    fields: Option[String] = None
    )(implicit reader: ClientResponseReader[IntegrationHub]): Future[IntegrationHub] = {
    // create path and map variables
    val path = (addFmt("/integration_hubs/{integration_hub_id}")
      replaceAll("\\{" + "integration_hub_id" + "\\}", integrationHubId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    fields match {
      case Some(param) => queryParams += "fields" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def updateIntegration(integrationId: Long,
    body: Integration,
    fields: Option[String] = None
    )(implicit reader: ClientResponseReader[Integration], writer: RequestWriter[Integration]): Future[Integration] = {
    // create path and map variables
    val path = (addFmt("/integrations/{integration_id}")
      replaceAll("\\{" + "integration_id" + "\\}", integrationId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling IntegrationApi->updateIntegration")
    fields match {
      case Some(param) => queryParams += "fields" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("PATCH", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def updateIntegrationHub(integrationHubId: Long,
    body: IntegrationHub,
    fields: Option[String] = None
    )(implicit reader: ClientResponseReader[IntegrationHub], writer: RequestWriter[IntegrationHub]): Future[IntegrationHub] = {
    // create path and map variables
    val path = (addFmt("/integration_hubs/{integration_hub_id}")
      replaceAll("\\{" + "integration_hub_id" + "\\}", integrationHubId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling IntegrationApi->updateIntegrationHub")
    fields match {
      case Some(param) => queryParams += "fields" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("PATCH", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
