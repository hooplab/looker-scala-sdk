/**
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api

import java.text.SimpleDateFormat

import io.swagger.client.model.CreateQueryTask
import io.swagger.client.model.Error
import io.swagger.client.model.Query
import io.swagger.client.model.QueryTask
import io.swagger.client.model.ValidationError
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class QueryApi(
  val defBasePath: String = "https://hoopla.eu.looker.com:19999/api/3.0",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new QueryApiAsyncHelper(client, config)

  /**
   * Create Query
   * ### Create a query.  This allows you to create a new query that you can later run. Looker queries are immutable once created and are not deleted. If you create a query that is exactly like an existing query then the existing query will be returned and no new query will be created. Whether a new query is created or not, you can use the &#39;id&#39; in the returned query with the &#39;run&#39; method.  The query parameters are passed as json in the body of the request.  
   *
   * @param body Query (optional)
   * @param fields Requested fields. (optional)
   * @return Query
   */
  def createQuery(body: Option[Query] = None, fields: Option[String] = None): Option[Query] = {
    val await = Try(Await.result(createQueryAsync(body, fields), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Create Query asynchronously
   * ### Create a query.  This allows you to create a new query that you can later run. Looker queries are immutable once created and are not deleted. If you create a query that is exactly like an existing query then the existing query will be returned and no new query will be created. Whether a new query is created or not, you can use the &#39;id&#39; in the returned query with the &#39;run&#39; method.  The query parameters are passed as json in the body of the request.  
   *
   * @param body Query (optional)
   * @param fields Requested fields. (optional)
   * @return Future(Query)
   */
  def createQueryAsync(body: Option[Query] = None, fields: Option[String] = None): Future[Query] = {
      helper.createQuery(body, fields)
  }

  /**
   * Run Query Async
   * ### Run a saved query asynchronously.  Runs a previously created query asynchronously. Returns a Query Task ID which can be used to fetch the results from the Query Tasks results endpoint. 
   *
   * @param body Query parameters 
   * @param limit Row limit (may override the limit in the saved query). (optional)
   * @param applyFormatting Apply model-specified formatting to each result. (optional)
   * @param applyVis Apply visualization options to results. (optional)
   * @param cache Get results from cache if available. (optional)
   * @param imageWidth Render width for image formats. (optional)
   * @param imageHeight Render height for image formats. (optional)
   * @param generateDrillLinks Generate drill links (only applicable to &#39;json_detail&#39; format. (optional)
   * @param forceProduction Force use of production models even if the user is in development mode. (optional)
   * @param cacheOnly Retrieve any results from cache even if the results have expired. (optional)
   * @param pathPrefix Prefix to use for drill links (url encoded). (optional)
   * @param rebuildPdts Rebuild PDTS used in query. (optional)
   * @param serverTableCalcs Perform table calculations on query results (optional)
   * @param fields Requested fields (optional)
   * @return QueryTask
   */
  def createQueryTask(body: CreateQueryTask, limit: Option[Long] = None, applyFormatting: Option[Boolean] = None, applyVis: Option[Boolean] = None, cache: Option[Boolean] = None, imageWidth: Option[Long] = None, imageHeight: Option[Long] = None, generateDrillLinks: Option[Boolean] = None, forceProduction: Option[Boolean] = None, cacheOnly: Option[Boolean] = None, pathPrefix: Option[String] = None, rebuildPdts: Option[Boolean] = None, serverTableCalcs: Option[Boolean] = None, fields: Option[String] = None): Option[QueryTask] = {
    val await = Try(Await.result(createQueryTaskAsync(body, limit, applyFormatting, applyVis, cache, imageWidth, imageHeight, generateDrillLinks, forceProduction, cacheOnly, pathPrefix, rebuildPdts, serverTableCalcs, fields), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Run Query Async asynchronously
   * ### Run a saved query asynchronously.  Runs a previously created query asynchronously. Returns a Query Task ID which can be used to fetch the results from the Query Tasks results endpoint. 
   *
   * @param body Query parameters 
   * @param limit Row limit (may override the limit in the saved query). (optional)
   * @param applyFormatting Apply model-specified formatting to each result. (optional)
   * @param applyVis Apply visualization options to results. (optional)
   * @param cache Get results from cache if available. (optional)
   * @param imageWidth Render width for image formats. (optional)
   * @param imageHeight Render height for image formats. (optional)
   * @param generateDrillLinks Generate drill links (only applicable to &#39;json_detail&#39; format. (optional)
   * @param forceProduction Force use of production models even if the user is in development mode. (optional)
   * @param cacheOnly Retrieve any results from cache even if the results have expired. (optional)
   * @param pathPrefix Prefix to use for drill links (url encoded). (optional)
   * @param rebuildPdts Rebuild PDTS used in query. (optional)
   * @param serverTableCalcs Perform table calculations on query results (optional)
   * @param fields Requested fields (optional)
   * @return Future(QueryTask)
   */
  def createQueryTaskAsync(body: CreateQueryTask, limit: Option[Long] = None, applyFormatting: Option[Boolean] = None, applyVis: Option[Boolean] = None, cache: Option[Boolean] = None, imageWidth: Option[Long] = None, imageHeight: Option[Long] = None, generateDrillLinks: Option[Boolean] = None, forceProduction: Option[Boolean] = None, cacheOnly: Option[Boolean] = None, pathPrefix: Option[String] = None, rebuildPdts: Option[Boolean] = None, serverTableCalcs: Option[Boolean] = None, fields: Option[String] = None): Future[QueryTask] = {
      helper.createQueryTask(body, limit, applyFormatting, applyVis, cache, imageWidth, imageHeight, generateDrillLinks, forceProduction, cacheOnly, pathPrefix, rebuildPdts, serverTableCalcs, fields)
  }

  /**
   * Get Query
   * ### Get a previously created query by id.  A Looker query object includes the various parameters that define a database query that has been run or could be run in the future. These parameters include: model, view, fields, filters, pivots, etc. Query *results* are not part of the query object.  Query objects are unique and immutable. Query objects are created automatically in Looker as users explore data. Looker does not delete them; they become part of the query history. When asked to create a query for any given set of parameters, Looker will first try to find an existing query object with matching parameters and will only create a new object when an appropriate object can not be found.  This &#39;get&#39; method is used to get the details about a query for a given id. See the other methods here to &#39;create&#39; and &#39;run&#39; queries.  Note that some fields like &#39;filter_config&#39; and &#39;vis_config&#39; etc are specific to how the Looker UI builds queries and visualizations and are not generally useful for API use. They are not required when creating new queries and can usually just be ignored.  
   *
   * @param queryId Id of query 
   * @param fields Requested fields. (optional)
   * @return Query
   */
  def query(queryId: Long, fields: Option[String] = None): Option[Query] = {
    val await = Try(Await.result(queryAsync(queryId, fields), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get Query asynchronously
   * ### Get a previously created query by id.  A Looker query object includes the various parameters that define a database query that has been run or could be run in the future. These parameters include: model, view, fields, filters, pivots, etc. Query *results* are not part of the query object.  Query objects are unique and immutable. Query objects are created automatically in Looker as users explore data. Looker does not delete them; they become part of the query history. When asked to create a query for any given set of parameters, Looker will first try to find an existing query object with matching parameters and will only create a new object when an appropriate object can not be found.  This &#39;get&#39; method is used to get the details about a query for a given id. See the other methods here to &#39;create&#39; and &#39;run&#39; queries.  Note that some fields like &#39;filter_config&#39; and &#39;vis_config&#39; etc are specific to how the Looker UI builds queries and visualizations and are not generally useful for API use. They are not required when creating new queries and can usually just be ignored.  
   *
   * @param queryId Id of query 
   * @param fields Requested fields. (optional)
   * @return Future(Query)
   */
  def queryAsync(queryId: Long, fields: Option[String] = None): Future[Query] = {
      helper.query(queryId, fields)
  }

  /**
   * Get Query for Slug
   * ### Get the query for a given query slug.  This returns the query for the &#39;slug&#39; in a query share URL.  The &#39;slug&#39; is a randomly chosen short string that is used as an alternative to the query&#39;s id value for use in URLs etc. This method exists as a convenience to help you use the API to &#39;find&#39; queries that have been created using the Looker UI.  You can use the Looker explore page to build a query and then choose the &#39;Share&#39; option to show the share url for the query. Share urls generally look something like &#39;https://looker.yourcompany/x/vwGSbfc&#39;. The trailing &#39;vwGSbfc&#39; is the share slug. You can pass that string to this api method to get details about the query. Those details include the &#39;id&#39; that you can use to run the query. Or, you can copy the query body (perhaps with your own modification) and use that as the basis to make/run new queries.  This will also work with slugs from Looker explore urls like &#39;https://looker.yourcompany/explore/ecommerce/orders?qid&#x3D;aogBgL6o3cKK1jN3RoZl5s&#39;. In this case &#39;aogBgL6o3cKK1jN3RoZl5s&#39; is the slug. 
   *
   * @param slug Slug of query 
   * @param fields Requested fields. (optional)
   * @return Query
   */
  def queryForSlug(slug: String, fields: Option[String] = None): Option[Query] = {
    val await = Try(Await.result(queryForSlugAsync(slug, fields), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get Query for Slug asynchronously
   * ### Get the query for a given query slug.  This returns the query for the &#39;slug&#39; in a query share URL.  The &#39;slug&#39; is a randomly chosen short string that is used as an alternative to the query&#39;s id value for use in URLs etc. This method exists as a convenience to help you use the API to &#39;find&#39; queries that have been created using the Looker UI.  You can use the Looker explore page to build a query and then choose the &#39;Share&#39; option to show the share url for the query. Share urls generally look something like &#39;https://looker.yourcompany/x/vwGSbfc&#39;. The trailing &#39;vwGSbfc&#39; is the share slug. You can pass that string to this api method to get details about the query. Those details include the &#39;id&#39; that you can use to run the query. Or, you can copy the query body (perhaps with your own modification) and use that as the basis to make/run new queries.  This will also work with slugs from Looker explore urls like &#39;https://looker.yourcompany/explore/ecommerce/orders?qid&#x3D;aogBgL6o3cKK1jN3RoZl5s&#39;. In this case &#39;aogBgL6o3cKK1jN3RoZl5s&#39; is the slug. 
   *
   * @param slug Slug of query 
   * @param fields Requested fields. (optional)
   * @return Future(Query)
   */
  def queryForSlugAsync(slug: String, fields: Option[String] = None): Future[Query] = {
      helper.queryForSlug(slug, fields)
  }

  /**
   * Get Async Query Info
   * Returns information about a Query Task.  Query Tasks are generated by running queries asynchronously. They are represented by a GUID returned from one of the async query endpoints. 
   *
   * @param queryTaskId ID of the Query Task 
   * @param fields Requested fields. (optional)
   * @return QueryTask
   */
  def queryTask(queryTaskId: String, fields: Option[String] = None): Option[QueryTask] = {
    val await = Try(Await.result(queryTaskAsync(queryTaskId, fields), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get Async Query Info asynchronously
   * Returns information about a Query Task.  Query Tasks are generated by running queries asynchronously. They are represented by a GUID returned from one of the async query endpoints. 
   *
   * @param queryTaskId ID of the Query Task 
   * @param fields Requested fields. (optional)
   * @return Future(QueryTask)
   */
  def queryTaskAsync(queryTaskId: String, fields: Option[String] = None): Future[QueryTask] = {
      helper.queryTask(queryTaskId, fields)
  }

  /**
   * Get Multiple Async Query Results
   * Fetch the results of multiple async Query Tasks in one response.  Query Tasks that are not ready will be skipped and will not appear in the response. Query Tasks whose results have expired will have a status of &#39;expired&#39;. If the user making the API request does not have sufficient privileges to view a Query Task result, the result will have a status of &#39;missing&#39; 
   *
   * @param queryTaskIds List of Query Task IDs 
   * @return Map[String, String]
   */
  def queryTaskMultiResults(queryTaskIds: List[String]): Option[Map[String, String]] = {
    val await = Try(Await.result(queryTaskMultiResultsAsync(queryTaskIds), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get Multiple Async Query Results asynchronously
   * Fetch the results of multiple async Query Tasks in one response.  Query Tasks that are not ready will be skipped and will not appear in the response. Query Tasks whose results have expired will have a status of &#39;expired&#39;. If the user making the API request does not have sufficient privileges to view a Query Task result, the result will have a status of &#39;missing&#39; 
   *
   * @param queryTaskIds List of Query Task IDs 
   * @return Future(Map[String, String])
   */
  def queryTaskMultiResultsAsync(queryTaskIds: List[String]): Future[Map[String, String]] = {
      helper.queryTaskMultiResults(queryTaskIds)
  }

  /**
   * Get Async Query Results
   * Returns the results of an async Query Task if the query has completed. 
   *
   * @param queryTaskId ID of the Query Task 
   * @return Map[String, String]
   */
  def queryTaskResults(queryTaskId: String): Option[Map[String, String]] = {
    val await = Try(Await.result(queryTaskResultsAsync(queryTaskId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get Async Query Results asynchronously
   * Returns the results of an async Query Task if the query has completed. 
   *
   * @param queryTaskId ID of the Query Task 
   * @return Future(Map[String, String])
   */
  def queryTaskResultsAsync(queryTaskId: String): Future[Map[String, String]] = {
      helper.queryTaskResults(queryTaskId)
  }

  /**
   * Run Inline Query
   * ### Run the query that is specified inline in the posted body.  This allows running a query as defined in json in the posted body. This combines the two actions of posting &amp; running a query into one step.  Here is an example body in json: &#x60;&#x60;&#x60; {   \&quot;model\&quot;:\&quot;thelook\&quot;,   \&quot;view\&quot;:\&quot;inventory_items\&quot;,   \&quot;fields\&quot;:[\&quot;category.name\&quot;,\&quot;inventory_items.days_in_inventory_tier\&quot;,\&quot;products.count\&quot;],   \&quot;filters\&quot;:{\&quot;category.name\&quot;:\&quot;socks\&quot;},   \&quot;sorts\&quot;:[\&quot;products.count desc 0\&quot;],   \&quot;limit\&quot;:\&quot;500\&quot;,   \&quot;query_timezone\&quot;:\&quot;America/Los_Angeles\&quot; } &#x60;&#x60;&#x60;  When using the Ruby SDK this would be passed as a Ruby hash like: &#x60;&#x60;&#x60; {  :model&#x3D;&gt;\&quot;thelook\&quot;,  :view&#x3D;&gt;\&quot;inventory_items\&quot;,  :fields&#x3D;&gt;   [\&quot;category.name\&quot;,    \&quot;inventory_items.days_in_inventory_tier\&quot;,    \&quot;products.count\&quot;],  :filters&#x3D;&gt;{:\&quot;category.name\&quot;&#x3D;&gt;\&quot;socks\&quot;},  :sorts&#x3D;&gt;[\&quot;products.count desc 0\&quot;],  :limit&#x3D;&gt;\&quot;500\&quot;,  :query_timezone&#x3D;&gt;\&quot;America/Los_Angeles\&quot;, } &#x60;&#x60;&#x60;  This will return the result of running the query in the format specified by the &#39;result_format&#39; parameter.  Supported formats:  | result_format | Description | :-----------: | :--- | | json | Plain json | json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query | csv | Comma separated values with a header | txt | Tab separated values with a header | html | Simple html | md | Simple markdown | xlsx | MS Excel spreadsheet | sql | Returns the generated SQL rather than running the query | png | A PNG image of the visualization of the query | jpg | A JPG image of the visualization of the query   
   *
   * @param resultFormat Format of result 
   * @param body inline query 
   * @param limit Row limit (may override the limit in the saved query). (optional)
   * @param applyFormatting Apply model-specified formatting to each result. (optional)
   * @param applyVis Apply visualization options to results. (optional)
   * @param cache Get results from cache if available. (optional)
   * @param imageWidth Render width for image formats. (optional)
   * @param imageHeight Render height for image formats. (optional)
   * @param generateDrillLinks Generate drill links (only applicable to &#39;json_detail&#39; format. (optional)
   * @param forceProduction Force use of production models even if the user is in development mode. (optional)
   * @param cacheOnly Retrieve any results from cache even if the results have expired. (optional)
   * @param pathPrefix Prefix to use for drill links (url encoded). (optional)
   * @param rebuildPdts Rebuild PDTS used in query. (optional)
   * @param serverTableCalcs Perform table calculations on query results (optional)
   * @return String
   */
  def runInlineQuery(resultFormat: String, body: Query, limit: Option[Long] = None, applyFormatting: Option[Boolean] = None, applyVis: Option[Boolean] = None, cache: Option[Boolean] = None, imageWidth: Option[Long] = None, imageHeight: Option[Long] = None, generateDrillLinks: Option[Boolean] = None, forceProduction: Option[Boolean] = None, cacheOnly: Option[Boolean] = None, pathPrefix: Option[String] = None, rebuildPdts: Option[Boolean] = None, serverTableCalcs: Option[Boolean] = None): Option[String] = {
    val await = Try(Await.result(runInlineQueryAsync(resultFormat, body, limit, applyFormatting, applyVis, cache, imageWidth, imageHeight, generateDrillLinks, forceProduction, cacheOnly, pathPrefix, rebuildPdts, serverTableCalcs), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Run Inline Query asynchronously
   * ### Run the query that is specified inline in the posted body.  This allows running a query as defined in json in the posted body. This combines the two actions of posting &amp; running a query into one step.  Here is an example body in json: &#x60;&#x60;&#x60; {   \&quot;model\&quot;:\&quot;thelook\&quot;,   \&quot;view\&quot;:\&quot;inventory_items\&quot;,   \&quot;fields\&quot;:[\&quot;category.name\&quot;,\&quot;inventory_items.days_in_inventory_tier\&quot;,\&quot;products.count\&quot;],   \&quot;filters\&quot;:{\&quot;category.name\&quot;:\&quot;socks\&quot;},   \&quot;sorts\&quot;:[\&quot;products.count desc 0\&quot;],   \&quot;limit\&quot;:\&quot;500\&quot;,   \&quot;query_timezone\&quot;:\&quot;America/Los_Angeles\&quot; } &#x60;&#x60;&#x60;  When using the Ruby SDK this would be passed as a Ruby hash like: &#x60;&#x60;&#x60; {  :model&#x3D;&gt;\&quot;thelook\&quot;,  :view&#x3D;&gt;\&quot;inventory_items\&quot;,  :fields&#x3D;&gt;   [\&quot;category.name\&quot;,    \&quot;inventory_items.days_in_inventory_tier\&quot;,    \&quot;products.count\&quot;],  :filters&#x3D;&gt;{:\&quot;category.name\&quot;&#x3D;&gt;\&quot;socks\&quot;},  :sorts&#x3D;&gt;[\&quot;products.count desc 0\&quot;],  :limit&#x3D;&gt;\&quot;500\&quot;,  :query_timezone&#x3D;&gt;\&quot;America/Los_Angeles\&quot;, } &#x60;&#x60;&#x60;  This will return the result of running the query in the format specified by the &#39;result_format&#39; parameter.  Supported formats:  | result_format | Description | :-----------: | :--- | | json | Plain json | json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query | csv | Comma separated values with a header | txt | Tab separated values with a header | html | Simple html | md | Simple markdown | xlsx | MS Excel spreadsheet | sql | Returns the generated SQL rather than running the query | png | A PNG image of the visualization of the query | jpg | A JPG image of the visualization of the query   
   *
   * @param resultFormat Format of result 
   * @param body inline query 
   * @param limit Row limit (may override the limit in the saved query). (optional)
   * @param applyFormatting Apply model-specified formatting to each result. (optional)
   * @param applyVis Apply visualization options to results. (optional)
   * @param cache Get results from cache if available. (optional)
   * @param imageWidth Render width for image formats. (optional)
   * @param imageHeight Render height for image formats. (optional)
   * @param generateDrillLinks Generate drill links (only applicable to &#39;json_detail&#39; format. (optional)
   * @param forceProduction Force use of production models even if the user is in development mode. (optional)
   * @param cacheOnly Retrieve any results from cache even if the results have expired. (optional)
   * @param pathPrefix Prefix to use for drill links (url encoded). (optional)
   * @param rebuildPdts Rebuild PDTS used in query. (optional)
   * @param serverTableCalcs Perform table calculations on query results (optional)
   * @return Future(String)
   */
  def runInlineQueryAsync(resultFormat: String, body: Query, limit: Option[Long] = None, applyFormatting: Option[Boolean] = None, applyVis: Option[Boolean] = None, cache: Option[Boolean] = None, imageWidth: Option[Long] = None, imageHeight: Option[Long] = None, generateDrillLinks: Option[Boolean] = None, forceProduction: Option[Boolean] = None, cacheOnly: Option[Boolean] = None, pathPrefix: Option[String] = None, rebuildPdts: Option[Boolean] = None, serverTableCalcs: Option[Boolean] = None): Future[String] = {
      helper.runInlineQuery(resultFormat, body, limit, applyFormatting, applyVis, cache, imageWidth, imageHeight, generateDrillLinks, forceProduction, cacheOnly, pathPrefix, rebuildPdts, serverTableCalcs)
  }

  /**
   * Run Query
   * ### Run a saved query.  This runs a previously saved query. You can use this on a query that was generated in the Looker UI or one that you have explicitly created using the API. You can also use a query &#39;id&#39; from a saved &#39;Look&#39;.  The &#39;result_format&#39; parameter specifies the desired structure and format of the response.  Supported formats:  | result_format | Description | :-----------: | :--- | | json | Plain json | json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query | csv | Comma separated values with a header | txt | Tab separated values with a header | html | Simple html | md | Simple markdown | xlsx | MS Excel spreadsheet | sql | Returns the generated SQL rather than running the query | png | A PNG image of the visualization of the query | jpg | A JPG image of the visualization of the query   
   *
   * @param queryId Id of query 
   * @param resultFormat Format of result 
   * @param limit Row limit (may override the limit in the saved query). (optional)
   * @param applyFormatting Apply model-specified formatting to each result. (optional)
   * @param applyVis Apply visualization options to results. (optional)
   * @param cache Get results from cache if available. (optional)
   * @param imageWidth Render width for image formats. (optional)
   * @param imageHeight Render height for image formats. (optional)
   * @param generateDrillLinks Generate drill links (only applicable to &#39;json_detail&#39; format. (optional)
   * @param forceProduction Force use of production models even if the user is in development mode. (optional)
   * @param cacheOnly Retrieve any results from cache even if the results have expired. (optional)
   * @param pathPrefix Prefix to use for drill links (url encoded). (optional)
   * @param rebuildPdts Rebuild PDTS used in query. (optional)
   * @param serverTableCalcs Perform table calculations on query results (optional)
   * @return String
   */
  def runQuery(queryId: Long, resultFormat: String, limit: Option[Long] = None, applyFormatting: Option[Boolean] = None, applyVis: Option[Boolean] = None, cache: Option[Boolean] = None, imageWidth: Option[Long] = None, imageHeight: Option[Long] = None, generateDrillLinks: Option[Boolean] = None, forceProduction: Option[Boolean] = None, cacheOnly: Option[Boolean] = None, pathPrefix: Option[String] = None, rebuildPdts: Option[Boolean] = None, serverTableCalcs: Option[Boolean] = None): Option[String] = {
    val await = Try(Await.result(runQueryAsync(queryId, resultFormat, limit, applyFormatting, applyVis, cache, imageWidth, imageHeight, generateDrillLinks, forceProduction, cacheOnly, pathPrefix, rebuildPdts, serverTableCalcs), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Run Query asynchronously
   * ### Run a saved query.  This runs a previously saved query. You can use this on a query that was generated in the Looker UI or one that you have explicitly created using the API. You can also use a query &#39;id&#39; from a saved &#39;Look&#39;.  The &#39;result_format&#39; parameter specifies the desired structure and format of the response.  Supported formats:  | result_format | Description | :-----------: | :--- | | json | Plain json | json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query | csv | Comma separated values with a header | txt | Tab separated values with a header | html | Simple html | md | Simple markdown | xlsx | MS Excel spreadsheet | sql | Returns the generated SQL rather than running the query | png | A PNG image of the visualization of the query | jpg | A JPG image of the visualization of the query   
   *
   * @param queryId Id of query 
   * @param resultFormat Format of result 
   * @param limit Row limit (may override the limit in the saved query). (optional)
   * @param applyFormatting Apply model-specified formatting to each result. (optional)
   * @param applyVis Apply visualization options to results. (optional)
   * @param cache Get results from cache if available. (optional)
   * @param imageWidth Render width for image formats. (optional)
   * @param imageHeight Render height for image formats. (optional)
   * @param generateDrillLinks Generate drill links (only applicable to &#39;json_detail&#39; format. (optional)
   * @param forceProduction Force use of production models even if the user is in development mode. (optional)
   * @param cacheOnly Retrieve any results from cache even if the results have expired. (optional)
   * @param pathPrefix Prefix to use for drill links (url encoded). (optional)
   * @param rebuildPdts Rebuild PDTS used in query. (optional)
   * @param serverTableCalcs Perform table calculations on query results (optional)
   * @return Future(String)
   */
  def runQueryAsync(queryId: Long, resultFormat: String, limit: Option[Long] = None, applyFormatting: Option[Boolean] = None, applyVis: Option[Boolean] = None, cache: Option[Boolean] = None, imageWidth: Option[Long] = None, imageHeight: Option[Long] = None, generateDrillLinks: Option[Boolean] = None, forceProduction: Option[Boolean] = None, cacheOnly: Option[Boolean] = None, pathPrefix: Option[String] = None, rebuildPdts: Option[Boolean] = None, serverTableCalcs: Option[Boolean] = None): Future[String] = {
      helper.runQuery(queryId, resultFormat, limit, applyFormatting, applyVis, cache, imageWidth, imageHeight, generateDrillLinks, forceProduction, cacheOnly, pathPrefix, rebuildPdts, serverTableCalcs)
  }

  /**
   * Run Url Encoded Query
   * ### Run an URL encoded query.  This requires the caller to encode the specifiers for the query into the URL query part using Looker-specific syntax as explained below.  Generally, you would want to use one of the methods that takes the parameters as json in the POST body for creating and/or running queries. This method exists for cases where one really needs to encode the parameters into the URL of a single &#39;GET&#39; request. This matches the way that the Looker UI formats &#39;explore&#39; URLs etc.  The parameters here are very similar to the json body formatting except that the filter syntax is tricky. Unfortunately, this format makes this method not currently callible via the &#39;Try it out!&#39; button in this documentation page. But, this is callable  when creating URLs manually or when using the Looker SDK.  Here is an example inline query URL:  &#x60;&#x60;&#x60; https://looker.mycompany.com:19999/api/3.0/queries/models/thelook/views/inventory_items/run/json?fields&#x3D;category.name,inventory_items.days_in_inventory_tier,products.count&amp;f[category.name]&#x3D;socks&amp;sorts&#x3D;products.count+desc+0&amp;limit&#x3D;500&amp;query_timezone&#x3D;America/Los_Angeles &#x60;&#x60;&#x60;  When invoking this endpoint with the Ruby SDK, pass the query parameter parts as a hash. The hash to match the above would look like:  &#x60;&#x60;&#x60;ruby query_params &#x3D; {   :fields &#x3D;&gt; \&quot;category.name,inventory_items.days_in_inventory_tier,products.count\&quot;,   :\&quot;f[category.name]\&quot; &#x3D;&gt; \&quot;socks\&quot;,   :sorts &#x3D;&gt; \&quot;products.count desc 0\&quot;,   :limit &#x3D;&gt; \&quot;500\&quot;,   :query_timezone &#x3D;&gt; \&quot;America/Los_Angeles\&quot; } response &#x3D; ruby_sdk.run_url_encoded_query(&#39;thelook&#39;,&#39;inventory_items&#39;,&#39;json&#39;, query_params)  &#x60;&#x60;&#x60;  Again, it is generally easier to use the variant of this method that passes the full query in the POST body. This method is available for cases where other alternatives won&#39;t fit the need.  Supported formats:  | result_format | Description | :-----------: | :--- | | json | Plain json | json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query | csv | Comma separated values with a header | txt | Tab separated values with a header | html | Simple html | md | Simple markdown | xlsx | MS Excel spreadsheet | sql | Returns the generated SQL rather than running the query | png | A PNG image of the visualization of the query | jpg | A JPG image of the visualization of the query   
   *
   * @param modelName Model name 
   * @param viewName View name 
   * @param resultFormat Format of result 
   * @return String
   */
  def runUrlEncodedQuery(modelName: String, viewName: String, resultFormat: String): Option[String] = {
    val await = Try(Await.result(runUrlEncodedQueryAsync(modelName, viewName, resultFormat), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Run Url Encoded Query asynchronously
   * ### Run an URL encoded query.  This requires the caller to encode the specifiers for the query into the URL query part using Looker-specific syntax as explained below.  Generally, you would want to use one of the methods that takes the parameters as json in the POST body for creating and/or running queries. This method exists for cases where one really needs to encode the parameters into the URL of a single &#39;GET&#39; request. This matches the way that the Looker UI formats &#39;explore&#39; URLs etc.  The parameters here are very similar to the json body formatting except that the filter syntax is tricky. Unfortunately, this format makes this method not currently callible via the &#39;Try it out!&#39; button in this documentation page. But, this is callable  when creating URLs manually or when using the Looker SDK.  Here is an example inline query URL:  &#x60;&#x60;&#x60; https://looker.mycompany.com:19999/api/3.0/queries/models/thelook/views/inventory_items/run/json?fields&#x3D;category.name,inventory_items.days_in_inventory_tier,products.count&amp;f[category.name]&#x3D;socks&amp;sorts&#x3D;products.count+desc+0&amp;limit&#x3D;500&amp;query_timezone&#x3D;America/Los_Angeles &#x60;&#x60;&#x60;  When invoking this endpoint with the Ruby SDK, pass the query parameter parts as a hash. The hash to match the above would look like:  &#x60;&#x60;&#x60;ruby query_params &#x3D; {   :fields &#x3D;&gt; \&quot;category.name,inventory_items.days_in_inventory_tier,products.count\&quot;,   :\&quot;f[category.name]\&quot; &#x3D;&gt; \&quot;socks\&quot;,   :sorts &#x3D;&gt; \&quot;products.count desc 0\&quot;,   :limit &#x3D;&gt; \&quot;500\&quot;,   :query_timezone &#x3D;&gt; \&quot;America/Los_Angeles\&quot; } response &#x3D; ruby_sdk.run_url_encoded_query(&#39;thelook&#39;,&#39;inventory_items&#39;,&#39;json&#39;, query_params)  &#x60;&#x60;&#x60;  Again, it is generally easier to use the variant of this method that passes the full query in the POST body. This method is available for cases where other alternatives won&#39;t fit the need.  Supported formats:  | result_format | Description | :-----------: | :--- | | json | Plain json | json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query | csv | Comma separated values with a header | txt | Tab separated values with a header | html | Simple html | md | Simple markdown | xlsx | MS Excel spreadsheet | sql | Returns the generated SQL rather than running the query | png | A PNG image of the visualization of the query | jpg | A JPG image of the visualization of the query   
   *
   * @param modelName Model name 
   * @param viewName View name 
   * @param resultFormat Format of result 
   * @return Future(String)
   */
  def runUrlEncodedQueryAsync(modelName: String, viewName: String, resultFormat: String): Future[String] = {
      helper.runUrlEncodedQuery(modelName, viewName, resultFormat)
  }

}

class QueryApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def createQuery(body: Option[Query] = None,
    fields: Option[String] = None
    )(implicit reader: ClientResponseReader[Query], writer: RequestWriter[Option[Query]]): Future[Query] = {
    // create path and map variables
    val path = (addFmt("/queries"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    fields match {
      case Some(param) => queryParams += "fields" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def createQueryTask(body: CreateQueryTask,
    limit: Option[Long] = None,
    applyFormatting: Option[Boolean] = None,
    applyVis: Option[Boolean] = None,
    cache: Option[Boolean] = None,
    imageWidth: Option[Long] = None,
    imageHeight: Option[Long] = None,
    generateDrillLinks: Option[Boolean] = None,
    forceProduction: Option[Boolean] = None,
    cacheOnly: Option[Boolean] = None,
    pathPrefix: Option[String] = None,
    rebuildPdts: Option[Boolean] = None,
    serverTableCalcs: Option[Boolean] = None,
    fields: Option[String] = None
    )(implicit reader: ClientResponseReader[QueryTask], writer: RequestWriter[CreateQueryTask]): Future[QueryTask] = {
    // create path and map variables
    val path = (addFmt("/query_tasks"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling QueryApi->createQueryTask")
    limit match {
      case Some(param) => queryParams += "limit" -> param.toString
      case _ => queryParams
    }
    applyFormatting match {
      case Some(param) => queryParams += "apply_formatting" -> param.toString
      case _ => queryParams
    }
    applyVis match {
      case Some(param) => queryParams += "apply_vis" -> param.toString
      case _ => queryParams
    }
    cache match {
      case Some(param) => queryParams += "cache" -> param.toString
      case _ => queryParams
    }
    imageWidth match {
      case Some(param) => queryParams += "image_width" -> param.toString
      case _ => queryParams
    }
    imageHeight match {
      case Some(param) => queryParams += "image_height" -> param.toString
      case _ => queryParams
    }
    generateDrillLinks match {
      case Some(param) => queryParams += "generate_drill_links" -> param.toString
      case _ => queryParams
    }
    forceProduction match {
      case Some(param) => queryParams += "force_production" -> param.toString
      case _ => queryParams
    }
    cacheOnly match {
      case Some(param) => queryParams += "cache_only" -> param.toString
      case _ => queryParams
    }
    pathPrefix match {
      case Some(param) => queryParams += "path_prefix" -> param.toString
      case _ => queryParams
    }
    rebuildPdts match {
      case Some(param) => queryParams += "rebuild_pdts" -> param.toString
      case _ => queryParams
    }
    serverTableCalcs match {
      case Some(param) => queryParams += "server_table_calcs" -> param.toString
      case _ => queryParams
    }
    fields match {
      case Some(param) => queryParams += "fields" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def query(queryId: Long,
    fields: Option[String] = None
    )(implicit reader: ClientResponseReader[Query]): Future[Query] = {
    // create path and map variables
    val path = (addFmt("/queries/{query_id}")
      replaceAll("\\{" + "query_id" + "\\}", queryId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    fields match {
      case Some(param) => queryParams += "fields" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def queryForSlug(slug: String,
    fields: Option[String] = None
    )(implicit reader: ClientResponseReader[Query]): Future[Query] = {
    // create path and map variables
    val path = (addFmt("/queries/slug/{slug}")
      replaceAll("\\{" + "slug" + "\\}", slug.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (slug == null) throw new Exception("Missing required parameter 'slug' when calling QueryApi->queryForSlug")

    fields match {
      case Some(param) => queryParams += "fields" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def queryTask(queryTaskId: String,
    fields: Option[String] = None
    )(implicit reader: ClientResponseReader[QueryTask]): Future[QueryTask] = {
    // create path and map variables
    val path = (addFmt("/query_tasks/{query_task_id}")
      replaceAll("\\{" + "query_task_id" + "\\}", queryTaskId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (queryTaskId == null) throw new Exception("Missing required parameter 'queryTaskId' when calling QueryApi->queryTask")

    fields match {
      case Some(param) => queryParams += "fields" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def queryTaskMultiResults(queryTaskIds: List[String])(implicit reader: ClientResponseReader[Map[String, String]]): Future[Map[String, String]] = {
    // create path and map variables
    val path = (addFmt("/query_tasks/multi_results"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (queryTaskIds == null) throw new Exception("Missing required parameter 'queryTaskIds' when calling QueryApi->queryTaskMultiResults")
    queryParams += "query_task_ids" -> queryTaskIds.toString

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def queryTaskResults(queryTaskId: String)(implicit reader: ClientResponseReader[Map[String, String]]): Future[Map[String, String]] = {
    // create path and map variables
    val path = (addFmt("/query_tasks/{query_task_id}/results")
      replaceAll("\\{" + "query_task_id" + "\\}", queryTaskId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (queryTaskId == null) throw new Exception("Missing required parameter 'queryTaskId' when calling QueryApi->queryTaskResults")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def runInlineQuery(resultFormat: String,
    body: Query,
    limit: Option[Long] = None,
    applyFormatting: Option[Boolean] = None,
    applyVis: Option[Boolean] = None,
    cache: Option[Boolean] = None,
    imageWidth: Option[Long] = None,
    imageHeight: Option[Long] = None,
    generateDrillLinks: Option[Boolean] = None,
    forceProduction: Option[Boolean] = None,
    cacheOnly: Option[Boolean] = None,
    pathPrefix: Option[String] = None,
    rebuildPdts: Option[Boolean] = None,
    serverTableCalcs: Option[Boolean] = None
    )(implicit reader: ClientResponseReader[String], writer: RequestWriter[Query]): Future[String] = {
    // create path and map variables
    val path = (addFmt("/queries/run/{result_format}")
      replaceAll("\\{" + "result_format" + "\\}", resultFormat.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (resultFormat == null) throw new Exception("Missing required parameter 'resultFormat' when calling QueryApi->runInlineQuery")

    if (body == null) throw new Exception("Missing required parameter 'body' when calling QueryApi->runInlineQuery")
    limit match {
      case Some(param) => queryParams += "limit" -> param.toString
      case _ => queryParams
    }
    applyFormatting match {
      case Some(param) => queryParams += "apply_formatting" -> param.toString
      case _ => queryParams
    }
    applyVis match {
      case Some(param) => queryParams += "apply_vis" -> param.toString
      case _ => queryParams
    }
    cache match {
      case Some(param) => queryParams += "cache" -> param.toString
      case _ => queryParams
    }
    imageWidth match {
      case Some(param) => queryParams += "image_width" -> param.toString
      case _ => queryParams
    }
    imageHeight match {
      case Some(param) => queryParams += "image_height" -> param.toString
      case _ => queryParams
    }
    generateDrillLinks match {
      case Some(param) => queryParams += "generate_drill_links" -> param.toString
      case _ => queryParams
    }
    forceProduction match {
      case Some(param) => queryParams += "force_production" -> param.toString
      case _ => queryParams
    }
    cacheOnly match {
      case Some(param) => queryParams += "cache_only" -> param.toString
      case _ => queryParams
    }
    pathPrefix match {
      case Some(param) => queryParams += "path_prefix" -> param.toString
      case _ => queryParams
    }
    rebuildPdts match {
      case Some(param) => queryParams += "rebuild_pdts" -> param.toString
      case _ => queryParams
    }
    serverTableCalcs match {
      case Some(param) => queryParams += "server_table_calcs" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def runQuery(queryId: Long,
    resultFormat: String,
    limit: Option[Long] = None,
    applyFormatting: Option[Boolean] = None,
    applyVis: Option[Boolean] = None,
    cache: Option[Boolean] = None,
    imageWidth: Option[Long] = None,
    imageHeight: Option[Long] = None,
    generateDrillLinks: Option[Boolean] = None,
    forceProduction: Option[Boolean] = None,
    cacheOnly: Option[Boolean] = None,
    pathPrefix: Option[String] = None,
    rebuildPdts: Option[Boolean] = None,
    serverTableCalcs: Option[Boolean] = None
    )(implicit reader: ClientResponseReader[String]): Future[String] = {
    // create path and map variables
    val path = (addFmt("/queries/{query_id}/run/{result_format}")
      replaceAll("\\{" + "query_id" + "\\}", queryId.toString)
      replaceAll("\\{" + "result_format" + "\\}", resultFormat.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (resultFormat == null) throw new Exception("Missing required parameter 'resultFormat' when calling QueryApi->runQuery")

    limit match {
      case Some(param) => queryParams += "limit" -> param.toString
      case _ => queryParams
    }
    applyFormatting match {
      case Some(param) => queryParams += "apply_formatting" -> param.toString
      case _ => queryParams
    }
    applyVis match {
      case Some(param) => queryParams += "apply_vis" -> param.toString
      case _ => queryParams
    }
    cache match {
      case Some(param) => queryParams += "cache" -> param.toString
      case _ => queryParams
    }
    imageWidth match {
      case Some(param) => queryParams += "image_width" -> param.toString
      case _ => queryParams
    }
    imageHeight match {
      case Some(param) => queryParams += "image_height" -> param.toString
      case _ => queryParams
    }
    generateDrillLinks match {
      case Some(param) => queryParams += "generate_drill_links" -> param.toString
      case _ => queryParams
    }
    forceProduction match {
      case Some(param) => queryParams += "force_production" -> param.toString
      case _ => queryParams
    }
    cacheOnly match {
      case Some(param) => queryParams += "cache_only" -> param.toString
      case _ => queryParams
    }
    pathPrefix match {
      case Some(param) => queryParams += "path_prefix" -> param.toString
      case _ => queryParams
    }
    rebuildPdts match {
      case Some(param) => queryParams += "rebuild_pdts" -> param.toString
      case _ => queryParams
    }
    serverTableCalcs match {
      case Some(param) => queryParams += "server_table_calcs" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def runUrlEncodedQuery(modelName: String,
    viewName: String,
    resultFormat: String)(implicit reader: ClientResponseReader[String]): Future[String] = {
    // create path and map variables
    val path = (addFmt("/queries/models/{model_name}/views/{view_name}/run/{result_format}")
      replaceAll("\\{" + "model_name" + "\\}", modelName.toString)
      replaceAll("\\{" + "view_name" + "\\}", viewName.toString)
      replaceAll("\\{" + "result_format" + "\\}", resultFormat.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (modelName == null) throw new Exception("Missing required parameter 'modelName' when calling QueryApi->runUrlEncodedQuery")

    if (viewName == null) throw new Exception("Missing required parameter 'viewName' when calling QueryApi->runUrlEncodedQuery")

    if (resultFormat == null) throw new Exception("Missing required parameter 'resultFormat' when calling QueryApi->runUrlEncodedQuery")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
