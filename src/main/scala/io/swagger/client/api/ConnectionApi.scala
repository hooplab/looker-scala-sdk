/**
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api

import java.text.SimpleDateFormat

import io.swagger.client.model.DBConnection
import io.swagger.client.model.DBConnectionTestResult
import io.swagger.client.model.DialectInfo
import io.swagger.client.model.Error
import io.swagger.client.model.ValidationError
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class ConnectionApi(
  val defBasePath: String = "https://hoopla.eu.looker.com:19999/api/3.0",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new ConnectionApiAsyncHelper(client, config)

  /**
   * Get All Connections
   * ### Get information about all connections. 
   *
   * @param fields Requested fields. (optional)
   * @return List[DBConnection]
   */
  def allConnections(fields: Option[String] = None): Option[List[DBConnection]] = {
    val await = Try(Await.result(allConnectionsAsync(fields), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get All Connections asynchronously
   * ### Get information about all connections. 
   *
   * @param fields Requested fields. (optional)
   * @return Future(List[DBConnection])
   */
  def allConnectionsAsync(fields: Option[String] = None): Future[List[DBConnection]] = {
      helper.allConnections(fields)
  }

  /**
   * Get All Dialect Infos
   * ### Get information about all dialects. 
   *
   * @param fields Requested fields. (optional)
   * @return List[DialectInfo]
   */
  def allDialectInfos(fields: Option[String] = None): Option[List[DialectInfo]] = {
    val await = Try(Await.result(allDialectInfosAsync(fields), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get All Dialect Infos asynchronously
   * ### Get information about all dialects. 
   *
   * @param fields Requested fields. (optional)
   * @return Future(List[DialectInfo])
   */
  def allDialectInfosAsync(fields: Option[String] = None): Future[List[DialectInfo]] = {
      helper.allDialectInfos(fields)
  }

  /**
   * Get Connection
   * ### Get information about a connection. 
   *
   * @param connectionName Name of connection 
   * @param fields Requested fields. (optional)
   * @return DBConnection
   */
  def connection(connectionName: String, fields: Option[String] = None): Option[DBConnection] = {
    val await = Try(Await.result(connectionAsync(connectionName, fields), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get Connection asynchronously
   * ### Get information about a connection. 
   *
   * @param connectionName Name of connection 
   * @param fields Requested fields. (optional)
   * @return Future(DBConnection)
   */
  def connectionAsync(connectionName: String, fields: Option[String] = None): Future[DBConnection] = {
      helper.connection(connectionName, fields)
  }

  /**
   * Create Connection
   * ### Create a connection using the specified configuration. 
   *
   * @param body Connection (optional)
   * @return DBConnection
   */
  def createConnection(body: Option[DBConnection] = None): Option[DBConnection] = {
    val await = Try(Await.result(createConnectionAsync(body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Create Connection asynchronously
   * ### Create a connection using the specified configuration. 
   *
   * @param body Connection (optional)
   * @return Future(DBConnection)
   */
  def createConnectionAsync(body: Option[DBConnection] = None): Future[DBConnection] = {
      helper.createConnection(body)
  }

  /**
   * Delete Connection
   * ### Delete a connection. 
   *
   * @param connectionName Name of connection 
   * @return String
   */
  def deleteConnection(connectionName: String): Option[String] = {
    val await = Try(Await.result(deleteConnectionAsync(connectionName), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Delete Connection asynchronously
   * ### Delete a connection. 
   *
   * @param connectionName Name of connection 
   * @return Future(String)
   */
  def deleteConnectionAsync(connectionName: String): Future[String] = {
      helper.deleteConnection(connectionName)
  }

  /**
   * Delete Connection
   * ### Delete a connection override. 
   *
   * @param connectionName Name of connection 
   * @param overrideContext Context of connection override 
   * @return String
   */
  def deleteConnectionOverride(connectionName: String, overrideContext: String): Option[String] = {
    val await = Try(Await.result(deleteConnectionOverrideAsync(connectionName, overrideContext), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Delete Connection asynchronously
   * ### Delete a connection override. 
   *
   * @param connectionName Name of connection 
   * @param overrideContext Context of connection override 
   * @return Future(String)
   */
  def deleteConnectionOverrideAsync(connectionName: String, overrideContext: String): Future[String] = {
      helper.deleteConnectionOverride(connectionName, overrideContext)
  }

  /**
   * Test Connection
   * ### Test an existing connection.  Note that a connection&#39;s &#39;dialect&#39; property has a &#39;connection_tests&#39; property that lists the specific types of tests that the connection supports.  Unsupported tests in the request will be ignored. 
   *
   * @param connectionName Name of connection 
   * @param tests Array of names of tests to run (optional)
   * @return List[DBConnectionTestResult]
   */
  def testConnection(connectionName: String, tests: Option[List[String]] = None): Option[List[DBConnectionTestResult]] = {
    val await = Try(Await.result(testConnectionAsync(connectionName, tests), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Test Connection asynchronously
   * ### Test an existing connection.  Note that a connection&#39;s &#39;dialect&#39; property has a &#39;connection_tests&#39; property that lists the specific types of tests that the connection supports.  Unsupported tests in the request will be ignored. 
   *
   * @param connectionName Name of connection 
   * @param tests Array of names of tests to run (optional)
   * @return Future(List[DBConnectionTestResult])
   */
  def testConnectionAsync(connectionName: String, tests: Option[List[String]] = None): Future[List[DBConnectionTestResult]] = {
      helper.testConnection(connectionName, tests)
  }

  /**
   * Test Connection Configuration
   * ### Test a connection configuration.  Note that a connection&#39;s &#39;dialect&#39; property has a &#39;connection_tests&#39; property that lists the specific types of tests that the connection supports.  Unsupported tests in the request will be ignored. 
   *
   * @param body Connection (optional)
   * @param tests Array of names of tests to run (optional)
   * @return List[DBConnectionTestResult]
   */
  def testConnectionConfig(body: Option[DBConnection] = None, tests: Option[List[String]] = None): Option[List[DBConnectionTestResult]] = {
    val await = Try(Await.result(testConnectionConfigAsync(body, tests), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Test Connection Configuration asynchronously
   * ### Test a connection configuration.  Note that a connection&#39;s &#39;dialect&#39; property has a &#39;connection_tests&#39; property that lists the specific types of tests that the connection supports.  Unsupported tests in the request will be ignored. 
   *
   * @param body Connection (optional)
   * @param tests Array of names of tests to run (optional)
   * @return Future(List[DBConnectionTestResult])
   */
  def testConnectionConfigAsync(body: Option[DBConnection] = None, tests: Option[List[String]] = None): Future[List[DBConnectionTestResult]] = {
      helper.testConnectionConfig(body, tests)
  }

  /**
   * Update Connection
   * ### Update a connection using the specified configuration. 
   *
   * @param connectionName Name of connection 
   * @param body Connection 
   * @return DBConnection
   */
  def updateConnection(connectionName: String, body: DBConnection): Option[DBConnection] = {
    val await = Try(Await.result(updateConnectionAsync(connectionName, body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Update Connection asynchronously
   * ### Update a connection using the specified configuration. 
   *
   * @param connectionName Name of connection 
   * @param body Connection 
   * @return Future(DBConnection)
   */
  def updateConnectionAsync(connectionName: String, body: DBConnection): Future[DBConnection] = {
      helper.updateConnection(connectionName, body)
  }

}

class ConnectionApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def allConnections(fields: Option[String] = None
    )(implicit reader: ClientResponseReader[List[DBConnection]]): Future[List[DBConnection]] = {
    // create path and map variables
    val path = (addFmt("/connections"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    fields match {
      case Some(param) => queryParams += "fields" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def allDialectInfos(fields: Option[String] = None
    )(implicit reader: ClientResponseReader[List[DialectInfo]]): Future[List[DialectInfo]] = {
    // create path and map variables
    val path = (addFmt("/dialect_info"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    fields match {
      case Some(param) => queryParams += "fields" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def connection(connectionName: String,
    fields: Option[String] = None
    )(implicit reader: ClientResponseReader[DBConnection]): Future[DBConnection] = {
    // create path and map variables
    val path = (addFmt("/connections/{connection_name}")
      replaceAll("\\{" + "connection_name" + "\\}", connectionName.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (connectionName == null) throw new Exception("Missing required parameter 'connectionName' when calling ConnectionApi->connection")

    fields match {
      case Some(param) => queryParams += "fields" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def createConnection(body: Option[DBConnection] = None
    )(implicit reader: ClientResponseReader[DBConnection], writer: RequestWriter[Option[DBConnection]]): Future[DBConnection] = {
    // create path and map variables
    val path = (addFmt("/connections"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def deleteConnection(connectionName: String)(implicit reader: ClientResponseReader[String]): Future[String] = {
    // create path and map variables
    val path = (addFmt("/connections/{connection_name}")
      replaceAll("\\{" + "connection_name" + "\\}", connectionName.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (connectionName == null) throw new Exception("Missing required parameter 'connectionName' when calling ConnectionApi->deleteConnection")


    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def deleteConnectionOverride(connectionName: String,
    overrideContext: String)(implicit reader: ClientResponseReader[String]): Future[String] = {
    // create path and map variables
    val path = (addFmt("/connections/{connection_name}/connection_override/{override_context}")
      replaceAll("\\{" + "connection_name" + "\\}", connectionName.toString)
      replaceAll("\\{" + "override_context" + "\\}", overrideContext.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (connectionName == null) throw new Exception("Missing required parameter 'connectionName' when calling ConnectionApi->deleteConnectionOverride")

    if (overrideContext == null) throw new Exception("Missing required parameter 'overrideContext' when calling ConnectionApi->deleteConnectionOverride")


    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def testConnection(connectionName: String,
    tests: Option[List[String]] = None
    )(implicit reader: ClientResponseReader[List[DBConnectionTestResult]]): Future[List[DBConnectionTestResult]] = {
    // create path and map variables
    val path = (addFmt("/connections/{connection_name}/test")
      replaceAll("\\{" + "connection_name" + "\\}", connectionName.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (connectionName == null) throw new Exception("Missing required parameter 'connectionName' when calling ConnectionApi->testConnection")

    tests match {
      case Some(param) => queryParams += "tests" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("PUT", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def testConnectionConfig(body: Option[DBConnection] = None,
    tests: Option[List[String]] = None
    )(implicit reader: ClientResponseReader[List[DBConnectionTestResult]], writer: RequestWriter[Option[DBConnection]]): Future[List[DBConnectionTestResult]] = {
    // create path and map variables
    val path = (addFmt("/connections/test"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    tests match {
      case Some(param) => queryParams += "tests" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("PUT", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def updateConnection(connectionName: String,
    body: DBConnection)(implicit reader: ClientResponseReader[DBConnection], writer: RequestWriter[DBConnection]): Future[DBConnection] = {
    // create path and map variables
    val path = (addFmt("/connections/{connection_name}")
      replaceAll("\\{" + "connection_name" + "\\}", connectionName.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (connectionName == null) throw new Exception("Missing required parameter 'connectionName' when calling ConnectionApi->updateConnection")

    if (body == null) throw new Exception("Missing required parameter 'body' when calling ConnectionApi->updateConnection")

    val resFuture = client.submit("PATCH", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
