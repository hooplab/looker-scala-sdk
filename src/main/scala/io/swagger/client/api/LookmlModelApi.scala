/**
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api

import java.text.SimpleDateFormat

import io.swagger.client.model.Error
import io.swagger.client.model.LookmlModel
import io.swagger.client.model.LookmlModelExplore
import io.swagger.client.model.ValidationError
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class LookmlModelApi(
  val defBasePath: String = "https://hoopla.eu.looker.com:19999/api/3.0",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new LookmlModelApiAsyncHelper(client, config)

  /**
   * Get All LookML Models
   * ### Get information about all lookml models. 
   *
   * @param fields Requested fields. (optional)
   * @return List[LookmlModel]
   */
  def allLookmlModels(fields: Option[String] = None): Option[List[LookmlModel]] = {
    val await = Try(Await.result(allLookmlModelsAsync(fields), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get All LookML Models asynchronously
   * ### Get information about all lookml models. 
   *
   * @param fields Requested fields. (optional)
   * @return Future(List[LookmlModel])
   */
  def allLookmlModelsAsync(fields: Option[String] = None): Future[List[LookmlModel]] = {
      helper.allLookmlModels(fields)
  }

  /**
   * Create LookML Model
   * ### Create a lookml model using the specified configuration. 
   *
   * @param body LookML Model (optional)
   * @return LookmlModel
   */
  def createLookmlModel(body: Option[LookmlModel] = None): Option[LookmlModel] = {
    val await = Try(Await.result(createLookmlModelAsync(body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Create LookML Model asynchronously
   * ### Create a lookml model using the specified configuration. 
   *
   * @param body LookML Model (optional)
   * @return Future(LookmlModel)
   */
  def createLookmlModelAsync(body: Option[LookmlModel] = None): Future[LookmlModel] = {
      helper.createLookmlModel(body)
  }

  /**
   * Delete LookML Model
   * ### Delete a lookml model. 
   *
   * @param lookmlModelName Name of lookml model. 
   * @return String
   */
  def deleteLookmlModel(lookmlModelName: String): Option[String] = {
    val await = Try(Await.result(deleteLookmlModelAsync(lookmlModelName), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Delete LookML Model asynchronously
   * ### Delete a lookml model. 
   *
   * @param lookmlModelName Name of lookml model. 
   * @return Future(String)
   */
  def deleteLookmlModelAsync(lookmlModelName: String): Future[String] = {
      helper.deleteLookmlModel(lookmlModelName)
  }

  /**
   * Get LookML Model
   * ### Get information about a lookml model. 
   *
   * @param lookmlModelName Name of lookml model. 
   * @param fields Requested fields. (optional)
   * @return LookmlModel
   */
  def lookmlModel(lookmlModelName: String, fields: Option[String] = None): Option[LookmlModel] = {
    val await = Try(Await.result(lookmlModelAsync(lookmlModelName, fields), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get LookML Model asynchronously
   * ### Get information about a lookml model. 
   *
   * @param lookmlModelName Name of lookml model. 
   * @param fields Requested fields. (optional)
   * @return Future(LookmlModel)
   */
  def lookmlModelAsync(lookmlModelName: String, fields: Option[String] = None): Future[LookmlModel] = {
      helper.lookmlModel(lookmlModelName, fields)
  }

  /**
   * Get LookML Model Explore
   * ### Get information about a lookml model explore. 
   *
   * @param lookmlModelName Name of lookml model. 
   * @param exploreName Name of explore. 
   * @param fields Requested fields. (optional)
   * @return LookmlModelExplore
   */
  def lookmlModelExplore(lookmlModelName: String, exploreName: String, fields: Option[String] = None): Option[LookmlModelExplore] = {
    val await = Try(Await.result(lookmlModelExploreAsync(lookmlModelName, exploreName, fields), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get LookML Model Explore asynchronously
   * ### Get information about a lookml model explore. 
   *
   * @param lookmlModelName Name of lookml model. 
   * @param exploreName Name of explore. 
   * @param fields Requested fields. (optional)
   * @return Future(LookmlModelExplore)
   */
  def lookmlModelExploreAsync(lookmlModelName: String, exploreName: String, fields: Option[String] = None): Future[LookmlModelExplore] = {
      helper.lookmlModelExplore(lookmlModelName, exploreName, fields)
  }

  /**
   * Update LookML Model
   * ### Update a lookml model using the specified configuration. 
   *
   * @param lookmlModelName Name of lookml model. 
   * @param body LookML Model 
   * @return LookmlModel
   */
  def updateLookmlModel(lookmlModelName: String, body: LookmlModel): Option[LookmlModel] = {
    val await = Try(Await.result(updateLookmlModelAsync(lookmlModelName, body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Update LookML Model asynchronously
   * ### Update a lookml model using the specified configuration. 
   *
   * @param lookmlModelName Name of lookml model. 
   * @param body LookML Model 
   * @return Future(LookmlModel)
   */
  def updateLookmlModelAsync(lookmlModelName: String, body: LookmlModel): Future[LookmlModel] = {
      helper.updateLookmlModel(lookmlModelName, body)
  }

}

class LookmlModelApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def allLookmlModels(fields: Option[String] = None
    )(implicit reader: ClientResponseReader[List[LookmlModel]]): Future[List[LookmlModel]] = {
    // create path and map variables
    val path = (addFmt("/lookml_models"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    fields match {
      case Some(param) => queryParams += "fields" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def createLookmlModel(body: Option[LookmlModel] = None
    )(implicit reader: ClientResponseReader[LookmlModel], writer: RequestWriter[Option[LookmlModel]]): Future[LookmlModel] = {
    // create path and map variables
    val path = (addFmt("/lookml_models"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def deleteLookmlModel(lookmlModelName: String)(implicit reader: ClientResponseReader[String]): Future[String] = {
    // create path and map variables
    val path = (addFmt("/lookml_models/{lookml_model_name}")
      replaceAll("\\{" + "lookml_model_name" + "\\}", lookmlModelName.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (lookmlModelName == null) throw new Exception("Missing required parameter 'lookmlModelName' when calling LookmlModelApi->deleteLookmlModel")


    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def lookmlModel(lookmlModelName: String,
    fields: Option[String] = None
    )(implicit reader: ClientResponseReader[LookmlModel]): Future[LookmlModel] = {
    // create path and map variables
    val path = (addFmt("/lookml_models/{lookml_model_name}")
      replaceAll("\\{" + "lookml_model_name" + "\\}", lookmlModelName.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (lookmlModelName == null) throw new Exception("Missing required parameter 'lookmlModelName' when calling LookmlModelApi->lookmlModel")

    fields match {
      case Some(param) => queryParams += "fields" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def lookmlModelExplore(lookmlModelName: String,
    exploreName: String,
    fields: Option[String] = None
    )(implicit reader: ClientResponseReader[LookmlModelExplore]): Future[LookmlModelExplore] = {
    // create path and map variables
    val path = (addFmt("/lookml_models/{lookml_model_name}/explores/{explore_name}")
      replaceAll("\\{" + "lookml_model_name" + "\\}", lookmlModelName.toString)
      replaceAll("\\{" + "explore_name" + "\\}", exploreName.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (lookmlModelName == null) throw new Exception("Missing required parameter 'lookmlModelName' when calling LookmlModelApi->lookmlModelExplore")

    if (exploreName == null) throw new Exception("Missing required parameter 'exploreName' when calling LookmlModelApi->lookmlModelExplore")

    fields match {
      case Some(param) => queryParams += "fields" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def updateLookmlModel(lookmlModelName: String,
    body: LookmlModel)(implicit reader: ClientResponseReader[LookmlModel], writer: RequestWriter[LookmlModel]): Future[LookmlModel] = {
    // create path and map variables
    val path = (addFmt("/lookml_models/{lookml_model_name}")
      replaceAll("\\{" + "lookml_model_name" + "\\}", lookmlModelName.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (lookmlModelName == null) throw new Exception("Missing required parameter 'lookmlModelName' when calling LookmlModelApi->updateLookmlModel")

    if (body == null) throw new Exception("Missing required parameter 'body' when calling LookmlModelApi->updateLookmlModel")

    val resFuture = client.submit("PATCH", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
