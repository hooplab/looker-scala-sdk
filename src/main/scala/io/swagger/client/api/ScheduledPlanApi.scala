/**
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api

import java.text.SimpleDateFormat

import io.swagger.client.model.Error
import io.swagger.client.model.ScheduledPlan
import io.swagger.client.model.ValidationError
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class ScheduledPlanApi(
  val defBasePath: String = "https://hoopla.eu.looker.com:19999/api/3.0",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new ScheduledPlanApiAsyncHelper(client, config)

  /**
   * Get All Scheduled Plans
   * ### Get All Scheduled Plans  Returns all scheduled plans owned by the caller or given user.  If no user_id is provided, this function returns the scheduled plans owned by the caller.   The caller must have &#x60;see_schedules&#x60; permission to see other users&#39; scheduled plans.   
   *
   * @param userId User Id (default is requesting user if not specified) (optional)
   * @param fields Requested fields. (optional)
   * @return List[ScheduledPlan]
   */
  def allScheduledPlans(userId: Option[Long] = None, fields: Option[String] = None): Option[List[ScheduledPlan]] = {
    val await = Try(Await.result(allScheduledPlansAsync(userId, fields), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get All Scheduled Plans asynchronously
   * ### Get All Scheduled Plans  Returns all scheduled plans owned by the caller or given user.  If no user_id is provided, this function returns the scheduled plans owned by the caller.   The caller must have &#x60;see_schedules&#x60; permission to see other users&#39; scheduled plans.   
   *
   * @param userId User Id (default is requesting user if not specified) (optional)
   * @param fields Requested fields. (optional)
   * @return Future(List[ScheduledPlan])
   */
  def allScheduledPlansAsync(userId: Option[Long] = None, fields: Option[String] = None): Future[List[ScheduledPlan]] = {
      helper.allScheduledPlans(userId, fields)
  }

  /**
   * Create Scheduled Plan
   * ### Create a Scheduled Plan  Create a scheduled plan to render a Look or Dashboard on a recurring schedule.  The queries that provide the data for the look or dashboard are run in the context of user account that owns the scheduled plan.  Admins can create scheduled plans on behalf of other users by specifying a user id.  Scheduled plan destinations must specify the data format to produce and send to the destination  Scheduled Plan Destination formats:  | format | Description | :-----------: | :--- | | json | A JSON object containing a &#x60;data&#x60; property which contains an array of JSON objects, one per row. No metadata. | json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query | inline_json | Same as the JSON format, except that the &#x60;data&#x60; property is a string containing JSON-escaped row data. Additional properties describe the data operation. This format is primarily used to send data to web hooks so that the web hook doesn&#39;t have to re-encode the JSON row data in order to pass it on to its ultimate destination. | csv | Comma separated values with a header | txt | Tab separated values with a header | html | Simple html | xlsx | MS Excel spreadsheet | wysiwyg_pdf | Dashboard rendered in a tiled layout to produce a PDF document | assembled_pdf | Dashboard rendered in a single column layout to produce a PDF document | wysiwyg_png | Dashboard rendered in a tiled layout to produce a PNG image ||  Valid formats vary by destination type and source object. &#x60;wysiwyg_pdf&#x60; is only valid for dashboards, for example.   
   *
   * @param body Scheduled Plan (optional)
   * @return ScheduledPlan
   */
  def createScheduledPlan(body: Option[ScheduledPlan] = None): Option[ScheduledPlan] = {
    val await = Try(Await.result(createScheduledPlanAsync(body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Create Scheduled Plan asynchronously
   * ### Create a Scheduled Plan  Create a scheduled plan to render a Look or Dashboard on a recurring schedule.  The queries that provide the data for the look or dashboard are run in the context of user account that owns the scheduled plan.  Admins can create scheduled plans on behalf of other users by specifying a user id.  Scheduled plan destinations must specify the data format to produce and send to the destination  Scheduled Plan Destination formats:  | format | Description | :-----------: | :--- | | json | A JSON object containing a &#x60;data&#x60; property which contains an array of JSON objects, one per row. No metadata. | json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query | inline_json | Same as the JSON format, except that the &#x60;data&#x60; property is a string containing JSON-escaped row data. Additional properties describe the data operation. This format is primarily used to send data to web hooks so that the web hook doesn&#39;t have to re-encode the JSON row data in order to pass it on to its ultimate destination. | csv | Comma separated values with a header | txt | Tab separated values with a header | html | Simple html | xlsx | MS Excel spreadsheet | wysiwyg_pdf | Dashboard rendered in a tiled layout to produce a PDF document | assembled_pdf | Dashboard rendered in a single column layout to produce a PDF document | wysiwyg_png | Dashboard rendered in a tiled layout to produce a PNG image ||  Valid formats vary by destination type and source object. &#x60;wysiwyg_pdf&#x60; is only valid for dashboards, for example.   
   *
   * @param body Scheduled Plan (optional)
   * @return Future(ScheduledPlan)
   */
  def createScheduledPlanAsync(body: Option[ScheduledPlan] = None): Future[ScheduledPlan] = {
      helper.createScheduledPlan(body)
  }

  /**
   * Delete Scheduled Plan
   * ### Delete a Scheduled Plan  Normal users can only delete their own scheduled plans. Admins can delete other users&#39; scheduled plans. 
   *
   * @param scheduledPlanId Scheduled Plan Id 
   * @return String
   */
  def deleteScheduledPlan(scheduledPlanId: Long): Option[String] = {
    val await = Try(Await.result(deleteScheduledPlanAsync(scheduledPlanId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Delete Scheduled Plan asynchronously
   * ### Delete a Scheduled Plan  Normal users can only delete their own scheduled plans. Admins can delete other users&#39; scheduled plans. 
   *
   * @param scheduledPlanId Scheduled Plan Id 
   * @return Future(String)
   */
  def deleteScheduledPlanAsync(scheduledPlanId: Long): Future[String] = {
      helper.deleteScheduledPlan(scheduledPlanId)
  }

  /**
   * Get Scheduled Plan
   * ### Get Information About a Scheduled Plan  Admins can fetch information about other users&#39; Scheduled Plans. 
   *
   * @param scheduledPlanId Scheduled Plan Id 
   * @param fields Requested fields. (optional)
   * @return ScheduledPlan
   */
  def scheduledPlan(scheduledPlanId: Long, fields: Option[String] = None): Option[ScheduledPlan] = {
    val await = Try(Await.result(scheduledPlanAsync(scheduledPlanId, fields), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get Scheduled Plan asynchronously
   * ### Get Information About a Scheduled Plan  Admins can fetch information about other users&#39; Scheduled Plans. 
   *
   * @param scheduledPlanId Scheduled Plan Id 
   * @param fields Requested fields. (optional)
   * @return Future(ScheduledPlan)
   */
  def scheduledPlanAsync(scheduledPlanId: Long, fields: Option[String] = None): Future[ScheduledPlan] = {
      helper.scheduledPlan(scheduledPlanId, fields)
  }

  /**
   * Run Scheduled Plan Once
   * ### Run a Scheduled Plan Immediately  Create a scheduled plan that runs only once, and immediately.  This can be useful for testing a Scheduled Plan before committing to a production schedule.  Admins can create scheduled plans on behalf of other users by specifying a user id.  Scheduled plan destinations must specify the data format to produce and send to the destination  Scheduled Plan Destination formats:  | format | Description | :-----------: | :--- | | json | A JSON object containing a &#x60;data&#x60; property which contains an array of JSON objects, one per row. No metadata. | json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query | inline_json | Same as the JSON format, except that the &#x60;data&#x60; property is a string containing JSON-escaped row data. Additional properties describe the data operation. This format is primarily used to send data to web hooks so that the web hook doesn&#39;t have to re-encode the JSON row data in order to pass it on to its ultimate destination. | csv | Comma separated values with a header | txt | Tab separated values with a header | html | Simple html | xlsx | MS Excel spreadsheet | wysiwyg_pdf | Dashboard rendered in a tiled layout to produce a PDF document | assembled_pdf | Dashboard rendered in a single column layout to produce a PDF document | wysiwyg_png | Dashboard rendered in a tiled layout to produce a PNG image ||  Valid formats vary by destination type and source object. &#x60;wysiwyg_pdf&#x60; is only valid for dashboards, for example.   
   *
   * @param body Scheduled Plan (optional)
   * @return ScheduledPlan
   */
  def scheduledPlanRunOnce(body: Option[ScheduledPlan] = None): Option[ScheduledPlan] = {
    val await = Try(Await.result(scheduledPlanRunOnceAsync(body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Run Scheduled Plan Once asynchronously
   * ### Run a Scheduled Plan Immediately  Create a scheduled plan that runs only once, and immediately.  This can be useful for testing a Scheduled Plan before committing to a production schedule.  Admins can create scheduled plans on behalf of other users by specifying a user id.  Scheduled plan destinations must specify the data format to produce and send to the destination  Scheduled Plan Destination formats:  | format | Description | :-----------: | :--- | | json | A JSON object containing a &#x60;data&#x60; property which contains an array of JSON objects, one per row. No metadata. | json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query | inline_json | Same as the JSON format, except that the &#x60;data&#x60; property is a string containing JSON-escaped row data. Additional properties describe the data operation. This format is primarily used to send data to web hooks so that the web hook doesn&#39;t have to re-encode the JSON row data in order to pass it on to its ultimate destination. | csv | Comma separated values with a header | txt | Tab separated values with a header | html | Simple html | xlsx | MS Excel spreadsheet | wysiwyg_pdf | Dashboard rendered in a tiled layout to produce a PDF document | assembled_pdf | Dashboard rendered in a single column layout to produce a PDF document | wysiwyg_png | Dashboard rendered in a tiled layout to produce a PNG image ||  Valid formats vary by destination type and source object. &#x60;wysiwyg_pdf&#x60; is only valid for dashboards, for example.   
   *
   * @param body Scheduled Plan (optional)
   * @return Future(ScheduledPlan)
   */
  def scheduledPlanRunOnceAsync(body: Option[ScheduledPlan] = None): Future[ScheduledPlan] = {
      helper.scheduledPlanRunOnce(body)
  }

  /**
   * Scheduled Plans for Dashboard
   * ### Get Scheduled Plans for a Dashboard  Returns all scheduled plans owned by the caller or given user, for a given dashboard.  If no user_id is provided, this function returns the scheduled plans owned by the caller.   The caller must have &#x60;see_schedules&#x60; permission to see other users&#39; scheduled plans.   
   *
   * @param dashboardId Dashboard Id 
   * @param userId User Id (default is requesting user if not specified) (optional)
   * @param fields Requested fields. (optional)
   * @return List[ScheduledPlan]
   */
  def scheduledPlansForDashboard(dashboardId: Long, userId: Option[Long] = None, fields: Option[String] = None): Option[List[ScheduledPlan]] = {
    val await = Try(Await.result(scheduledPlansForDashboardAsync(dashboardId, userId, fields), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Scheduled Plans for Dashboard asynchronously
   * ### Get Scheduled Plans for a Dashboard  Returns all scheduled plans owned by the caller or given user, for a given dashboard.  If no user_id is provided, this function returns the scheduled plans owned by the caller.   The caller must have &#x60;see_schedules&#x60; permission to see other users&#39; scheduled plans.   
   *
   * @param dashboardId Dashboard Id 
   * @param userId User Id (default is requesting user if not specified) (optional)
   * @param fields Requested fields. (optional)
   * @return Future(List[ScheduledPlan])
   */
  def scheduledPlansForDashboardAsync(dashboardId: Long, userId: Option[Long] = None, fields: Option[String] = None): Future[List[ScheduledPlan]] = {
      helper.scheduledPlansForDashboard(dashboardId, userId, fields)
  }

  /**
   * Scheduled Plans for Look
   * ### Get Scheduled Plans for a Look  Returns all scheduled plans owned by the caller or given user, for a given look.  If no user_id is provided, this function returns the scheduled plans owned by the caller.   The caller must have &#x60;see_schedules&#x60; permission to see other users&#39; scheduled plans.   
   *
   * @param lookId Look Id 
   * @param userId User Id (default is requesting user if not specified) (optional)
   * @param fields Requested fields. (optional)
   * @return List[ScheduledPlan]
   */
  def scheduledPlansForLook(lookId: Long, userId: Option[Long] = None, fields: Option[String] = None): Option[List[ScheduledPlan]] = {
    val await = Try(Await.result(scheduledPlansForLookAsync(lookId, userId, fields), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Scheduled Plans for Look asynchronously
   * ### Get Scheduled Plans for a Look  Returns all scheduled plans owned by the caller or given user, for a given look.  If no user_id is provided, this function returns the scheduled plans owned by the caller.   The caller must have &#x60;see_schedules&#x60; permission to see other users&#39; scheduled plans.   
   *
   * @param lookId Look Id 
   * @param userId User Id (default is requesting user if not specified) (optional)
   * @param fields Requested fields. (optional)
   * @return Future(List[ScheduledPlan])
   */
  def scheduledPlansForLookAsync(lookId: Long, userId: Option[Long] = None, fields: Option[String] = None): Future[List[ScheduledPlan]] = {
      helper.scheduledPlansForLook(lookId, userId, fields)
  }

  /**
   * Scheduled Plans for LookML Dashboard
   * ### Get Scheduled Plans for a LookML Dashboard  Returns all scheduled plans owned by the caller or given user, for a given LookML dashboard.  If no user_id is provided, this function returns the scheduled plans owned by the caller.   The caller must have &#x60;see_schedules&#x60; permission to see other users&#39; scheduled plans.   
   *
   * @param lookmlDashboardId LookML Dashboard Id 
   * @param userId User Id (default is requesting user if not specified) (optional)
   * @param fields Requested fields. (optional)
   * @return List[ScheduledPlan]
   */
  def scheduledPlansForLookmlDashboard(lookmlDashboardId: Long, userId: Option[Long] = None, fields: Option[String] = None): Option[List[ScheduledPlan]] = {
    val await = Try(Await.result(scheduledPlansForLookmlDashboardAsync(lookmlDashboardId, userId, fields), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Scheduled Plans for LookML Dashboard asynchronously
   * ### Get Scheduled Plans for a LookML Dashboard  Returns all scheduled plans owned by the caller or given user, for a given LookML dashboard.  If no user_id is provided, this function returns the scheduled plans owned by the caller.   The caller must have &#x60;see_schedules&#x60; permission to see other users&#39; scheduled plans.   
   *
   * @param lookmlDashboardId LookML Dashboard Id 
   * @param userId User Id (default is requesting user if not specified) (optional)
   * @param fields Requested fields. (optional)
   * @return Future(List[ScheduledPlan])
   */
  def scheduledPlansForLookmlDashboardAsync(lookmlDashboardId: Long, userId: Option[Long] = None, fields: Option[String] = None): Future[List[ScheduledPlan]] = {
      helper.scheduledPlansForLookmlDashboard(lookmlDashboardId, userId, fields)
  }

  /**
   * Scheduled Plans for Space
   * ### Get Scheduled Plans for a Space  Returns scheduled plans owned by the caller for a given space id. 
   *
   * @param spaceId Space Id 
   * @param fields Requested fields. (optional)
   * @return List[ScheduledPlan]
   */
  def scheduledPlansForSpace(spaceId: Long, fields: Option[String] = None): Option[List[ScheduledPlan]] = {
    val await = Try(Await.result(scheduledPlansForSpaceAsync(spaceId, fields), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Scheduled Plans for Space asynchronously
   * ### Get Scheduled Plans for a Space  Returns scheduled plans owned by the caller for a given space id. 
   *
   * @param spaceId Space Id 
   * @param fields Requested fields. (optional)
   * @return Future(List[ScheduledPlan])
   */
  def scheduledPlansForSpaceAsync(spaceId: Long, fields: Option[String] = None): Future[List[ScheduledPlan]] = {
      helper.scheduledPlansForSpace(spaceId, fields)
  }

  /**
   * Update Scheduled Plan
   * ### Update a Scheduled Plan  Admins can update other users&#39; Scheduled Plans.  Note: Any scheduled plan destinations specified in an update will **replace** all scheduled plan destinations currently defined for the scheduled plan.  For Example: If a scheduled plan has destinations A, B, and C, and you call update on this scheduled plan specifying only B in the destinations, then destinations A and C will be deleted by the update.  Scheduled plan destinations must specify the data format to produce and send to the destination  Scheduled Plan Destination formats:  | format | Description | :-----------: | :--- | | json | A JSON object containing a &#x60;data&#x60; property which contains an array of JSON objects, one per row. No metadata. | json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query | inline_json | Same as the JSON format, except that the &#x60;data&#x60; property is a string containing JSON-escaped row data. Additional properties describe the data operation. This format is primarily used to send data to web hooks so that the web hook doesn&#39;t have to re-encode the JSON row data in order to pass it on to its ultimate destination. | csv | Comma separated values with a header | txt | Tab separated values with a header | html | Simple html | xlsx | MS Excel spreadsheet | wysiwyg_pdf | Dashboard rendered in a tiled layout to produce a PDF document | assembled_pdf | Dashboard rendered in a single column layout to produce a PDF document | wysiwyg_png | Dashboard rendered in a tiled layout to produce a PNG image ||  Valid formats vary by destination type and source object. &#x60;wysiwyg_pdf&#x60; is only valid for dashboards, for example.   
   *
   * @param scheduledPlanId Scheduled Plan Id 
   * @param body Scheduled Plan 
   * @return ScheduledPlan
   */
  def updateScheduledPlan(scheduledPlanId: Long, body: ScheduledPlan): Option[ScheduledPlan] = {
    val await = Try(Await.result(updateScheduledPlanAsync(scheduledPlanId, body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Update Scheduled Plan asynchronously
   * ### Update a Scheduled Plan  Admins can update other users&#39; Scheduled Plans.  Note: Any scheduled plan destinations specified in an update will **replace** all scheduled plan destinations currently defined for the scheduled plan.  For Example: If a scheduled plan has destinations A, B, and C, and you call update on this scheduled plan specifying only B in the destinations, then destinations A and C will be deleted by the update.  Scheduled plan destinations must specify the data format to produce and send to the destination  Scheduled Plan Destination formats:  | format | Description | :-----------: | :--- | | json | A JSON object containing a &#x60;data&#x60; property which contains an array of JSON objects, one per row. No metadata. | json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query | inline_json | Same as the JSON format, except that the &#x60;data&#x60; property is a string containing JSON-escaped row data. Additional properties describe the data operation. This format is primarily used to send data to web hooks so that the web hook doesn&#39;t have to re-encode the JSON row data in order to pass it on to its ultimate destination. | csv | Comma separated values with a header | txt | Tab separated values with a header | html | Simple html | xlsx | MS Excel spreadsheet | wysiwyg_pdf | Dashboard rendered in a tiled layout to produce a PDF document | assembled_pdf | Dashboard rendered in a single column layout to produce a PDF document | wysiwyg_png | Dashboard rendered in a tiled layout to produce a PNG image ||  Valid formats vary by destination type and source object. &#x60;wysiwyg_pdf&#x60; is only valid for dashboards, for example.   
   *
   * @param scheduledPlanId Scheduled Plan Id 
   * @param body Scheduled Plan 
   * @return Future(ScheduledPlan)
   */
  def updateScheduledPlanAsync(scheduledPlanId: Long, body: ScheduledPlan): Future[ScheduledPlan] = {
      helper.updateScheduledPlan(scheduledPlanId, body)
  }

}

class ScheduledPlanApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def allScheduledPlans(userId: Option[Long] = None,
    fields: Option[String] = None
    )(implicit reader: ClientResponseReader[List[ScheduledPlan]]): Future[List[ScheduledPlan]] = {
    // create path and map variables
    val path = (addFmt("/scheduled_plans"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    userId match {
      case Some(param) => queryParams += "user_id" -> param.toString
      case _ => queryParams
    }
    fields match {
      case Some(param) => queryParams += "fields" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def createScheduledPlan(body: Option[ScheduledPlan] = None
    )(implicit reader: ClientResponseReader[ScheduledPlan], writer: RequestWriter[Option[ScheduledPlan]]): Future[ScheduledPlan] = {
    // create path and map variables
    val path = (addFmt("/scheduled_plans"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def deleteScheduledPlan(scheduledPlanId: Long)(implicit reader: ClientResponseReader[String]): Future[String] = {
    // create path and map variables
    val path = (addFmt("/scheduled_plans/{scheduled_plan_id}")
      replaceAll("\\{" + "scheduled_plan_id" + "\\}", scheduledPlanId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def scheduledPlan(scheduledPlanId: Long,
    fields: Option[String] = None
    )(implicit reader: ClientResponseReader[ScheduledPlan]): Future[ScheduledPlan] = {
    // create path and map variables
    val path = (addFmt("/scheduled_plans/{scheduled_plan_id}")
      replaceAll("\\{" + "scheduled_plan_id" + "\\}", scheduledPlanId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    fields match {
      case Some(param) => queryParams += "fields" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def scheduledPlanRunOnce(body: Option[ScheduledPlan] = None
    )(implicit reader: ClientResponseReader[ScheduledPlan], writer: RequestWriter[Option[ScheduledPlan]]): Future[ScheduledPlan] = {
    // create path and map variables
    val path = (addFmt("/scheduled_plans/run_once"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def scheduledPlansForDashboard(dashboardId: Long,
    userId: Option[Long] = None,
    fields: Option[String] = None
    )(implicit reader: ClientResponseReader[List[ScheduledPlan]]): Future[List[ScheduledPlan]] = {
    // create path and map variables
    val path = (addFmt("/scheduled_plans/dashboard/{dashboard_id}")
      replaceAll("\\{" + "dashboard_id" + "\\}", dashboardId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    userId match {
      case Some(param) => queryParams += "user_id" -> param.toString
      case _ => queryParams
    }
    fields match {
      case Some(param) => queryParams += "fields" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def scheduledPlansForLook(lookId: Long,
    userId: Option[Long] = None,
    fields: Option[String] = None
    )(implicit reader: ClientResponseReader[List[ScheduledPlan]]): Future[List[ScheduledPlan]] = {
    // create path and map variables
    val path = (addFmt("/scheduled_plans/look/{look_id}")
      replaceAll("\\{" + "look_id" + "\\}", lookId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    userId match {
      case Some(param) => queryParams += "user_id" -> param.toString
      case _ => queryParams
    }
    fields match {
      case Some(param) => queryParams += "fields" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def scheduledPlansForLookmlDashboard(lookmlDashboardId: Long,
    userId: Option[Long] = None,
    fields: Option[String] = None
    )(implicit reader: ClientResponseReader[List[ScheduledPlan]]): Future[List[ScheduledPlan]] = {
    // create path and map variables
    val path = (addFmt("/scheduled_plans/lookml_dashboard/{lookml_dashboard_id}")
      replaceAll("\\{" + "lookml_dashboard_id" + "\\}", lookmlDashboardId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    userId match {
      case Some(param) => queryParams += "user_id" -> param.toString
      case _ => queryParams
    }
    fields match {
      case Some(param) => queryParams += "fields" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def scheduledPlansForSpace(spaceId: Long,
    fields: Option[String] = None
    )(implicit reader: ClientResponseReader[List[ScheduledPlan]]): Future[List[ScheduledPlan]] = {
    // create path and map variables
    val path = (addFmt("/scheduled_plans/space/{space_id}")
      replaceAll("\\{" + "space_id" + "\\}", spaceId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    fields match {
      case Some(param) => queryParams += "fields" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def updateScheduledPlan(scheduledPlanId: Long,
    body: ScheduledPlan)(implicit reader: ClientResponseReader[ScheduledPlan], writer: RequestWriter[ScheduledPlan]): Future[ScheduledPlan] = {
    // create path and map variables
    val path = (addFmt("/scheduled_plans/{scheduled_plan_id}")
      replaceAll("\\{" + "scheduled_plan_id" + "\\}", scheduledPlanId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling ScheduledPlanApi->updateScheduledPlan")

    val resFuture = client.submit("PATCH", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
