/**
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api

import java.text.SimpleDateFormat

import io.swagger.client.model.CreateDashboardRenderTask
import io.swagger.client.model.Error
import io.swagger.client.model.RenderTask
import io.swagger.client.model.ValidationError
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class RenderTaskApi(
  val defBasePath: String = "https://hoopla.eu.looker.com:19999/api/3.0",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new RenderTaskApiAsyncHelper(client, config)

  /**
   * Create Dashboard Render Task
   * ### Create a new task to render a dashboard to a document or image.  Returns a render task object. To check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task). Once the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).  
   *
   * @param dashboardId Id of dashboard to render 
   * @param resultFormat Output type: pdf, png, or jpg 
   * @param body Dashboard render task parameters 
   * @param width Output width in pixels 
   * @param height Output height in pixels 
   * @param fields Requested fields. (optional)
   * @return RenderTask
   */
  def createDashboardRenderTask(dashboardId: Long, resultFormat: String, body: CreateDashboardRenderTask, width: Long, height: Long, fields: Option[String] = None): Option[RenderTask] = {
    val await = Try(Await.result(createDashboardRenderTaskAsync(dashboardId, resultFormat, body, width, height, fields), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Create Dashboard Render Task asynchronously
   * ### Create a new task to render a dashboard to a document or image.  Returns a render task object. To check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task). Once the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).  
   *
   * @param dashboardId Id of dashboard to render 
   * @param resultFormat Output type: pdf, png, or jpg 
   * @param body Dashboard render task parameters 
   * @param width Output width in pixels 
   * @param height Output height in pixels 
   * @param fields Requested fields. (optional)
   * @return Future(RenderTask)
   */
  def createDashboardRenderTaskAsync(dashboardId: Long, resultFormat: String, body: CreateDashboardRenderTask, width: Long, height: Long, fields: Option[String] = None): Future[RenderTask] = {
      helper.createDashboardRenderTask(dashboardId, resultFormat, body, width, height, fields)
  }

  /**
   * Create Look Render Task
   * ### Create a new task to render a look to an image.  Returns a render task object. To check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task). Once the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).  
   *
   * @param lookId Id of look to render 
   * @param resultFormat Output type: png, or jpg 
   * @param width Output width in pixels 
   * @param height Output height in pixels 
   * @param fields Requested fields. (optional)
   * @return RenderTask
   */
  def createLookRenderTask(lookId: Long, resultFormat: String, width: Long, height: Long, fields: Option[String] = None): Option[RenderTask] = {
    val await = Try(Await.result(createLookRenderTaskAsync(lookId, resultFormat, width, height, fields), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Create Look Render Task asynchronously
   * ### Create a new task to render a look to an image.  Returns a render task object. To check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task). Once the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).  
   *
   * @param lookId Id of look to render 
   * @param resultFormat Output type: png, or jpg 
   * @param width Output width in pixels 
   * @param height Output height in pixels 
   * @param fields Requested fields. (optional)
   * @return Future(RenderTask)
   */
  def createLookRenderTaskAsync(lookId: Long, resultFormat: String, width: Long, height: Long, fields: Option[String] = None): Future[RenderTask] = {
      helper.createLookRenderTask(lookId, resultFormat, width, height, fields)
  }

  /**
   * Create Lookml Dashboard Render Task
   * ### Create a new task to render a lookml dashboard to a document or image.  Returns a render task object. To check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task). Once the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).  
   *
   * @param dashboardId Id of lookml dashboard to render 
   * @param resultFormat Output type: pdf, png, or jpg 
   * @param body Dashboard render task parameters 
   * @param width Output width in pixels 
   * @param height Output height in pixels 
   * @param fields Requested fields. (optional)
   * @return RenderTask
   */
  def createLookmlDashboardRenderTask(dashboardId: String, resultFormat: String, body: CreateDashboardRenderTask, width: Long, height: Long, fields: Option[String] = None): Option[RenderTask] = {
    val await = Try(Await.result(createLookmlDashboardRenderTaskAsync(dashboardId, resultFormat, body, width, height, fields), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Create Lookml Dashboard Render Task asynchronously
   * ### Create a new task to render a lookml dashboard to a document or image.  Returns a render task object. To check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task). Once the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).  
   *
   * @param dashboardId Id of lookml dashboard to render 
   * @param resultFormat Output type: pdf, png, or jpg 
   * @param body Dashboard render task parameters 
   * @param width Output width in pixels 
   * @param height Output height in pixels 
   * @param fields Requested fields. (optional)
   * @return Future(RenderTask)
   */
  def createLookmlDashboardRenderTaskAsync(dashboardId: String, resultFormat: String, body: CreateDashboardRenderTask, width: Long, height: Long, fields: Option[String] = None): Future[RenderTask] = {
      helper.createLookmlDashboardRenderTask(dashboardId, resultFormat, body, width, height, fields)
  }

  /**
   * Create Query Render Task
   * ### Create a new task to render an existing query to an image.  Returns a render task object. To check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task). Once the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).  
   *
   * @param queryId Id of the query to render 
   * @param resultFormat Output type: png or jpg 
   * @param width Output width in pixels 
   * @param height Output height in pixels 
   * @param fields Requested fields. (optional)
   * @return RenderTask
   */
  def createQueryRenderTask(queryId: Long, resultFormat: String, width: Long, height: Long, fields: Option[String] = None): Option[RenderTask] = {
    val await = Try(Await.result(createQueryRenderTaskAsync(queryId, resultFormat, width, height, fields), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Create Query Render Task asynchronously
   * ### Create a new task to render an existing query to an image.  Returns a render task object. To check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task). Once the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).  
   *
   * @param queryId Id of the query to render 
   * @param resultFormat Output type: png or jpg 
   * @param width Output width in pixels 
   * @param height Output height in pixels 
   * @param fields Requested fields. (optional)
   * @return Future(RenderTask)
   */
  def createQueryRenderTaskAsync(queryId: Long, resultFormat: String, width: Long, height: Long, fields: Option[String] = None): Future[RenderTask] = {
      helper.createQueryRenderTask(queryId, resultFormat, width, height, fields)
  }

  /**
   * Get Render Task
   * ### Get information about a render task.  Returns a render task object. To check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task). Once the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).  
   *
   * @param renderTaskId Id of render task 
   * @param fields Requested fields. (optional)
   * @return RenderTask
   */
  def renderTask(renderTaskId: String, fields: Option[String] = None): Option[RenderTask] = {
    val await = Try(Await.result(renderTaskAsync(renderTaskId, fields), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get Render Task asynchronously
   * ### Get information about a render task.  Returns a render task object. To check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task). Once the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).  
   *
   * @param renderTaskId Id of render task 
   * @param fields Requested fields. (optional)
   * @return Future(RenderTask)
   */
  def renderTaskAsync(renderTaskId: String, fields: Option[String] = None): Future[RenderTask] = {
      helper.renderTask(renderTaskId, fields)
  }

  /**
   * Render Task Results
   * ### Get the document or image produced by a completed render task.  Returns &#x60;102 Processing&#x60; if the render task has not completed. 
   *
   * @param renderTaskId Id of render task 
   * @return String
   */
  def renderTaskResults(renderTaskId: String): Option[String] = {
    val await = Try(Await.result(renderTaskResultsAsync(renderTaskId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Render Task Results asynchronously
   * ### Get the document or image produced by a completed render task.  Returns &#x60;102 Processing&#x60; if the render task has not completed. 
   *
   * @param renderTaskId Id of render task 
   * @return Future(String)
   */
  def renderTaskResultsAsync(renderTaskId: String): Future[String] = {
      helper.renderTaskResults(renderTaskId)
  }

}

class RenderTaskApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def createDashboardRenderTask(dashboardId: Long,
    resultFormat: String,
    body: CreateDashboardRenderTask,
    width: Long,
    height: Long,
    fields: Option[String] = None
    )(implicit reader: ClientResponseReader[RenderTask], writer: RequestWriter[CreateDashboardRenderTask]): Future[RenderTask] = {
    // create path and map variables
    val path = (addFmt("/render_tasks/dashboards/{dashboard_id}/{result_format}")
      replaceAll("\\{" + "dashboard_id" + "\\}", dashboardId.toString)
      replaceAll("\\{" + "result_format" + "\\}", resultFormat.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (resultFormat == null) throw new Exception("Missing required parameter 'resultFormat' when calling RenderTaskApi->createDashboardRenderTask")

    if (body == null) throw new Exception("Missing required parameter 'body' when calling RenderTaskApi->createDashboardRenderTask")
    queryParams += "width" -> width.toString
    queryParams += "height" -> height.toString
    fields match {
      case Some(param) => queryParams += "fields" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def createLookRenderTask(lookId: Long,
    resultFormat: String,
    width: Long,
    height: Long,
    fields: Option[String] = None
    )(implicit reader: ClientResponseReader[RenderTask]): Future[RenderTask] = {
    // create path and map variables
    val path = (addFmt("/render_tasks/looks/{look_id}/{result_format}")
      replaceAll("\\{" + "look_id" + "\\}", lookId.toString)
      replaceAll("\\{" + "result_format" + "\\}", resultFormat.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (resultFormat == null) throw new Exception("Missing required parameter 'resultFormat' when calling RenderTaskApi->createLookRenderTask")

    queryParams += "width" -> width.toString
    queryParams += "height" -> height.toString
    fields match {
      case Some(param) => queryParams += "fields" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def createLookmlDashboardRenderTask(dashboardId: String,
    resultFormat: String,
    body: CreateDashboardRenderTask,
    width: Long,
    height: Long,
    fields: Option[String] = None
    )(implicit reader: ClientResponseReader[RenderTask], writer: RequestWriter[CreateDashboardRenderTask]): Future[RenderTask] = {
    // create path and map variables
    val path = (addFmt("/render_tasks/lookml_dashboards/{dashboard_id}/{result_format}")
      replaceAll("\\{" + "dashboard_id" + "\\}", dashboardId.toString)
      replaceAll("\\{" + "result_format" + "\\}", resultFormat.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (dashboardId == null) throw new Exception("Missing required parameter 'dashboardId' when calling RenderTaskApi->createLookmlDashboardRenderTask")

    if (resultFormat == null) throw new Exception("Missing required parameter 'resultFormat' when calling RenderTaskApi->createLookmlDashboardRenderTask")

    if (body == null) throw new Exception("Missing required parameter 'body' when calling RenderTaskApi->createLookmlDashboardRenderTask")
    queryParams += "width" -> width.toString
    queryParams += "height" -> height.toString
    fields match {
      case Some(param) => queryParams += "fields" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def createQueryRenderTask(queryId: Long,
    resultFormat: String,
    width: Long,
    height: Long,
    fields: Option[String] = None
    )(implicit reader: ClientResponseReader[RenderTask]): Future[RenderTask] = {
    // create path and map variables
    val path = (addFmt("/render_tasks/queries/{query_id}/{result_format}")
      replaceAll("\\{" + "query_id" + "\\}", queryId.toString)
      replaceAll("\\{" + "result_format" + "\\}", resultFormat.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (resultFormat == null) throw new Exception("Missing required parameter 'resultFormat' when calling RenderTaskApi->createQueryRenderTask")

    queryParams += "width" -> width.toString
    queryParams += "height" -> height.toString
    fields match {
      case Some(param) => queryParams += "fields" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def renderTask(renderTaskId: String,
    fields: Option[String] = None
    )(implicit reader: ClientResponseReader[RenderTask]): Future[RenderTask] = {
    // create path and map variables
    val path = (addFmt("/render_tasks/{render_task_id}")
      replaceAll("\\{" + "render_task_id" + "\\}", renderTaskId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (renderTaskId == null) throw new Exception("Missing required parameter 'renderTaskId' when calling RenderTaskApi->renderTask")

    fields match {
      case Some(param) => queryParams += "fields" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def renderTaskResults(renderTaskId: String)(implicit reader: ClientResponseReader[String]): Future[String] = {
    // create path and map variables
    val path = (addFmt("/render_tasks/{render_task_id}/results")
      replaceAll("\\{" + "render_task_id" + "\\}", renderTaskId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (renderTaskId == null) throw new Exception("Missing required parameter 'renderTaskId' when calling RenderTaskApi->renderTaskResults")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
