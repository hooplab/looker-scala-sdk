/**
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api

import java.text.SimpleDateFormat

import io.swagger.client.model.Error
import io.swagger.client.model.LDAPConfig
import io.swagger.client.model.LDAPConfigTestResult
import io.swagger.client.model.OIDCConfig
import io.swagger.client.model.SamlConfig
import io.swagger.client.model.SamlMetadataParseResult
import io.swagger.client.model.ValidationError
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class AuthApi(
  val defBasePath: String = "https://hoopla.eu.looker.com:19999/api/3.0",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new AuthApiAsyncHelper(client, config)

  /**
   * Create OIDC Test Configuration
   * ### Create a OIDC test configuration. 
   *
   * @param body OIDC test config 
   * @return OIDCConfig
   */
  def createOidcTestConfig(body: OIDCConfig): Option[OIDCConfig] = {
    val await = Try(Await.result(createOidcTestConfigAsync(body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Create OIDC Test Configuration asynchronously
   * ### Create a OIDC test configuration. 
   *
   * @param body OIDC test config 
   * @return Future(OIDCConfig)
   */
  def createOidcTestConfigAsync(body: OIDCConfig): Future[OIDCConfig] = {
      helper.createOidcTestConfig(body)
  }

  /**
   * Create SAML Test Configuration
   * ### Create a SAML test configuration. 
   *
   * @param body SAML test config 
   * @return SamlConfig
   */
  def createSamlTestConfig(body: SamlConfig): Option[SamlConfig] = {
    val await = Try(Await.result(createSamlTestConfigAsync(body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Create SAML Test Configuration asynchronously
   * ### Create a SAML test configuration. 
   *
   * @param body SAML test config 
   * @return Future(SamlConfig)
   */
  def createSamlTestConfigAsync(body: SamlConfig): Future[SamlConfig] = {
      helper.createSamlTestConfig(body)
  }

  /**
   * Delete OIDC Test Configuration
   * ### Delete a OIDC test configuration. 
   *
   * @param testSlug Slug of test config 
   * @return String
   */
  def deleteOidcTestConfig(testSlug: String): Option[String] = {
    val await = Try(Await.result(deleteOidcTestConfigAsync(testSlug), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Delete OIDC Test Configuration asynchronously
   * ### Delete a OIDC test configuration. 
   *
   * @param testSlug Slug of test config 
   * @return Future(String)
   */
  def deleteOidcTestConfigAsync(testSlug: String): Future[String] = {
      helper.deleteOidcTestConfig(testSlug)
  }

  /**
   * Delete SAML Test Configuration
   * ### Delete a SAML test configuration. 
   *
   * @param testSlug Slug of test config 
   * @return String
   */
  def deleteSamlTestConfig(testSlug: String): Option[String] = {
    val await = Try(Await.result(deleteSamlTestConfigAsync(testSlug), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Delete SAML Test Configuration asynchronously
   * ### Delete a SAML test configuration. 
   *
   * @param testSlug Slug of test config 
   * @return Future(String)
   */
  def deleteSamlTestConfigAsync(testSlug: String): Future[String] = {
      helper.deleteSamlTestConfig(testSlug)
  }

  /**
   * Parse SAML IdP Url
   * ### Fetch the given url and parse it as a SAML IdP metadata document and return the result. Note that this requires that the url be public or at least at a location where the Looker instance can fetch it without requiring any special authentication. 
   *
   * @param body SAML IdP metadata public url 
   * @return SamlMetadataParseResult
   */
  def fetchAndParseSamlIdpMetadata(body: String): Option[SamlMetadataParseResult] = {
    val await = Try(Await.result(fetchAndParseSamlIdpMetadataAsync(body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Parse SAML IdP Url asynchronously
   * ### Fetch the given url and parse it as a SAML IdP metadata document and return the result. Note that this requires that the url be public or at least at a location where the Looker instance can fetch it without requiring any special authentication. 
   *
   * @param body SAML IdP metadata public url 
   * @return Future(SamlMetadataParseResult)
   */
  def fetchAndParseSamlIdpMetadataAsync(body: String): Future[SamlMetadataParseResult] = {
      helper.fetchAndParseSamlIdpMetadata(body)
  }

  /**
   * Get LDAP Configuration
   * ### Get the LDAP configuration.  Looker can be optionally configured to authenticate users against an Active Directory or other LDAP directory server. LDAP setup requires coordination with an administrator of that directory server.  Only Looker administrators can read and update the LDAP configuration.  Configuring LDAP impacts authentication for all users. This configuration should be done carefully.  Looker maintains a single LDAP configuration. It can be read and updated.       Updates only succeed if the new state will be valid (in the sense that all required fields are populated);       it is up to you to ensure that the configuration is appropriate and correct).  LDAP is enabled or disabled for Looker using the **enabled** field.  Looker will never return an **auth_password** field. That value can be set, but never retrieved.  See the [Looker LDAP docs](https://www.looker.com/docs/r/api/ldap_setup) for additional information. 
   *
   * @return LDAPConfig
   */
  def ldapConfig(): Option[LDAPConfig] = {
    val await = Try(Await.result(ldapConfigAsync(), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get LDAP Configuration asynchronously
   * ### Get the LDAP configuration.  Looker can be optionally configured to authenticate users against an Active Directory or other LDAP directory server. LDAP setup requires coordination with an administrator of that directory server.  Only Looker administrators can read and update the LDAP configuration.  Configuring LDAP impacts authentication for all users. This configuration should be done carefully.  Looker maintains a single LDAP configuration. It can be read and updated.       Updates only succeed if the new state will be valid (in the sense that all required fields are populated);       it is up to you to ensure that the configuration is appropriate and correct).  LDAP is enabled or disabled for Looker using the **enabled** field.  Looker will never return an **auth_password** field. That value can be set, but never retrieved.  See the [Looker LDAP docs](https://www.looker.com/docs/r/api/ldap_setup) for additional information. 
   *
   * @return Future(LDAPConfig)
   */
  def ldapConfigAsync(): Future[LDAPConfig] = {
      helper.ldapConfig()
  }

  /**
   * Get OIDC Configuration
   * ### Get the OIDC configuration.  Looker can be optionally configured to authenticate users against an OpenID Connect (OIDC) authentication server. OIDC setup requires coordination with an administrator of that server.  Only Looker administrators can read and update the OIDC configuration.  Configuring OIDC impacts authentication for all users. This configuration should be done carefully.  Looker maintains a single OIDC configuation. It can be read and updated.       Updates only succeed if the new state will be valid (in the sense that all required fields are populated);       it is up to you to ensure that the configuration is appropriate and correct).  OIDC is enabled or disabled for Looker using the **enabled** field. 
   *
   * @return OIDCConfig
   */
  def oidcConfig(): Option[OIDCConfig] = {
    val await = Try(Await.result(oidcConfigAsync(), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get OIDC Configuration asynchronously
   * ### Get the OIDC configuration.  Looker can be optionally configured to authenticate users against an OpenID Connect (OIDC) authentication server. OIDC setup requires coordination with an administrator of that server.  Only Looker administrators can read and update the OIDC configuration.  Configuring OIDC impacts authentication for all users. This configuration should be done carefully.  Looker maintains a single OIDC configuation. It can be read and updated.       Updates only succeed if the new state will be valid (in the sense that all required fields are populated);       it is up to you to ensure that the configuration is appropriate and correct).  OIDC is enabled or disabled for Looker using the **enabled** field. 
   *
   * @return Future(OIDCConfig)
   */
  def oidcConfigAsync(): Future[OIDCConfig] = {
      helper.oidcConfig()
  }

  /**
   * Get OIDC Test Configuration
   * ### Get a OIDC test configuration by test_slug. 
   *
   * @param testSlug Slug of test config 
   * @return OIDCConfig
   */
  def oidcTestConfig(testSlug: String): Option[OIDCConfig] = {
    val await = Try(Await.result(oidcTestConfigAsync(testSlug), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get OIDC Test Configuration asynchronously
   * ### Get a OIDC test configuration by test_slug. 
   *
   * @param testSlug Slug of test config 
   * @return Future(OIDCConfig)
   */
  def oidcTestConfigAsync(testSlug: String): Future[OIDCConfig] = {
      helper.oidcTestConfig(testSlug)
  }

  /**
   * Parse SAML IdP XML
   * ### Parse the given xml as a SAML IdP metadata document and return the result. 
   *
   * @param body SAML IdP metadata xml 
   * @return SamlMetadataParseResult
   */
  def parseSamlIdpMetadata(body: String): Option[SamlMetadataParseResult] = {
    val await = Try(Await.result(parseSamlIdpMetadataAsync(body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Parse SAML IdP XML asynchronously
   * ### Parse the given xml as a SAML IdP metadata document and return the result. 
   *
   * @param body SAML IdP metadata xml 
   * @return Future(SamlMetadataParseResult)
   */
  def parseSamlIdpMetadataAsync(body: String): Future[SamlMetadataParseResult] = {
      helper.parseSamlIdpMetadata(body)
  }

  /**
   * Get SAML Configuration
   * ### Get the SAML configuration.  Looker can be optionally configured to authenticate users against a SAML authentication server. SAML setup requires coordination with an administrator of that server.  Only Looker administrators can read and update the SAML configuration.  Configuring SAML impacts authentication for all users. This configuration should be done carefully.  Looker maintains a single SAML configuation. It can be read and updated.       Updates only succeed if the new state will be valid (in the sense that all required fields are populated);       it is up to you to ensure that the configuration is appropriate and correct).  SAML is enabled or disabled for Looker using the **enabled** field. 
   *
   * @return SamlConfig
   */
  def samlConfig(): Option[SamlConfig] = {
    val await = Try(Await.result(samlConfigAsync(), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get SAML Configuration asynchronously
   * ### Get the SAML configuration.  Looker can be optionally configured to authenticate users against a SAML authentication server. SAML setup requires coordination with an administrator of that server.  Only Looker administrators can read and update the SAML configuration.  Configuring SAML impacts authentication for all users. This configuration should be done carefully.  Looker maintains a single SAML configuation. It can be read and updated.       Updates only succeed if the new state will be valid (in the sense that all required fields are populated);       it is up to you to ensure that the configuration is appropriate and correct).  SAML is enabled or disabled for Looker using the **enabled** field. 
   *
   * @return Future(SamlConfig)
   */
  def samlConfigAsync(): Future[SamlConfig] = {
      helper.samlConfig()
  }

  /**
   * Get SAML Test Configuration
   * ### Get a SAML test configuration by test_slug. 
   *
   * @param testSlug Slug of test config 
   * @return SamlConfig
   */
  def samlTestConfig(testSlug: String): Option[SamlConfig] = {
    val await = Try(Await.result(samlTestConfigAsync(testSlug), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get SAML Test Configuration asynchronously
   * ### Get a SAML test configuration by test_slug. 
   *
   * @param testSlug Slug of test config 
   * @return Future(SamlConfig)
   */
  def samlTestConfigAsync(testSlug: String): Future[SamlConfig] = {
      helper.samlTestConfig(testSlug)
  }

  /**
   * Test LDAP Auth
   * ### Test the connection authentication settings for an LDAP configuration.  This tests that the connection is possible and that a &#39;server&#39; account to be used by Looker can       authenticate to the LDAP server given connection and authentication information.  **connection_host**, **connection_port**, and **auth_username**, are required.       **connection_tls** and **auth_password** are optional.  Example: &#x60;&#x60;&#x60;json {   \&quot;connection_host\&quot;: \&quot;ldap.example.com\&quot;,   \&quot;connection_port\&quot;: \&quot;636\&quot;,   \&quot;connection_tls\&quot;: true,   \&quot;auth_username\&quot;: \&quot;cn&#x3D;looker,dc&#x3D;example,dc&#x3D;com\&quot;,   \&quot;auth_password\&quot;: \&quot;secret\&quot; } &#x60;&#x60;&#x60;  Looker will never return an **auth_password**. If this request omits the **auth_password** field, then       the **auth_password** value from the active config (if present) will be used for the test.  The active LDAP settings are not modified.  
   *
   * @param body LDAP Config 
   * @return LDAPConfigTestResult
   */
  def testLdapConfigAuth(body: LDAPConfig): Option[LDAPConfigTestResult] = {
    val await = Try(Await.result(testLdapConfigAuthAsync(body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Test LDAP Auth asynchronously
   * ### Test the connection authentication settings for an LDAP configuration.  This tests that the connection is possible and that a &#39;server&#39; account to be used by Looker can       authenticate to the LDAP server given connection and authentication information.  **connection_host**, **connection_port**, and **auth_username**, are required.       **connection_tls** and **auth_password** are optional.  Example: &#x60;&#x60;&#x60;json {   \&quot;connection_host\&quot;: \&quot;ldap.example.com\&quot;,   \&quot;connection_port\&quot;: \&quot;636\&quot;,   \&quot;connection_tls\&quot;: true,   \&quot;auth_username\&quot;: \&quot;cn&#x3D;looker,dc&#x3D;example,dc&#x3D;com\&quot;,   \&quot;auth_password\&quot;: \&quot;secret\&quot; } &#x60;&#x60;&#x60;  Looker will never return an **auth_password**. If this request omits the **auth_password** field, then       the **auth_password** value from the active config (if present) will be used for the test.  The active LDAP settings are not modified.  
   *
   * @param body LDAP Config 
   * @return Future(LDAPConfigTestResult)
   */
  def testLdapConfigAuthAsync(body: LDAPConfig): Future[LDAPConfigTestResult] = {
      helper.testLdapConfigAuth(body)
  }

  /**
   * Test LDAP Connection
   * ### Test the connection settings for an LDAP configuration.  This tests that the connection is possible given a connection_host and connection_port.  **connection_host** and **connection_port** are required. **connection_tls** is optional.  Example: &#x60;&#x60;&#x60;json {   \&quot;connection_host\&quot;: \&quot;ldap.example.com\&quot;,   \&quot;connection_port\&quot;: \&quot;636\&quot;,   \&quot;connection_tls\&quot;: true } &#x60;&#x60;&#x60;  No authentication to the LDAP server is attempted.  The active LDAP settings are not modified. 
   *
   * @param body LDAP Config 
   * @return LDAPConfigTestResult
   */
  def testLdapConfigConnection(body: LDAPConfig): Option[LDAPConfigTestResult] = {
    val await = Try(Await.result(testLdapConfigConnectionAsync(body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Test LDAP Connection asynchronously
   * ### Test the connection settings for an LDAP configuration.  This tests that the connection is possible given a connection_host and connection_port.  **connection_host** and **connection_port** are required. **connection_tls** is optional.  Example: &#x60;&#x60;&#x60;json {   \&quot;connection_host\&quot;: \&quot;ldap.example.com\&quot;,   \&quot;connection_port\&quot;: \&quot;636\&quot;,   \&quot;connection_tls\&quot;: true } &#x60;&#x60;&#x60;  No authentication to the LDAP server is attempted.  The active LDAP settings are not modified. 
   *
   * @param body LDAP Config 
   * @return Future(LDAPConfigTestResult)
   */
  def testLdapConfigConnectionAsync(body: LDAPConfig): Future[LDAPConfigTestResult] = {
      helper.testLdapConfigConnection(body)
  }

  /**
   * Test LDAP User Auth
   * ### Test the user authentication settings for an LDAP configuration.  This test accepts a full LDAP configuration along with a username/password pair and attempts to       authenticate the user with the LDAP server. The configuration is validated before attempting the       authentication.  Looker will never return an **auth_password**. If this request omits the **auth_password** field, then       the **auth_password** value from the active config (if present) will be used for the test.  **test_ldap_user** and **test_ldap_password** are required.  The active LDAP settings are not modified.  
   *
   * @param body LDAP Config 
   * @return LDAPConfigTestResult
   */
  def testLdapConfigUserAuth(body: LDAPConfig): Option[LDAPConfigTestResult] = {
    val await = Try(Await.result(testLdapConfigUserAuthAsync(body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Test LDAP User Auth asynchronously
   * ### Test the user authentication settings for an LDAP configuration.  This test accepts a full LDAP configuration along with a username/password pair and attempts to       authenticate the user with the LDAP server. The configuration is validated before attempting the       authentication.  Looker will never return an **auth_password**. If this request omits the **auth_password** field, then       the **auth_password** value from the active config (if present) will be used for the test.  **test_ldap_user** and **test_ldap_password** are required.  The active LDAP settings are not modified.  
   *
   * @param body LDAP Config 
   * @return Future(LDAPConfigTestResult)
   */
  def testLdapConfigUserAuthAsync(body: LDAPConfig): Future[LDAPConfigTestResult] = {
      helper.testLdapConfigUserAuth(body)
  }

  /**
   * Test LDAP User Info
   * ### Test the user authentication settings for an LDAP configuration without authenticating the user.  This test will let you easily test the mapping for user properties and roles for any user without      needing to authenticate as that user.  This test accepts a full LDAP configuration along with a username and attempts to find the full info      for the user from the LDAP server without actually authenticating the user. So, user password is not      required.The configuration is validated before attempting to contact the server.  **test_ldap_user** is required.  The active LDAP settings are not modified.  
   *
   * @param body LDAP Config 
   * @return LDAPConfigTestResult
   */
  def testLdapConfigUserInfo(body: LDAPConfig): Option[LDAPConfigTestResult] = {
    val await = Try(Await.result(testLdapConfigUserInfoAsync(body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Test LDAP User Info asynchronously
   * ### Test the user authentication settings for an LDAP configuration without authenticating the user.  This test will let you easily test the mapping for user properties and roles for any user without      needing to authenticate as that user.  This test accepts a full LDAP configuration along with a username and attempts to find the full info      for the user from the LDAP server without actually authenticating the user. So, user password is not      required.The configuration is validated before attempting to contact the server.  **test_ldap_user** is required.  The active LDAP settings are not modified.  
   *
   * @param body LDAP Config 
   * @return Future(LDAPConfigTestResult)
   */
  def testLdapConfigUserInfoAsync(body: LDAPConfig): Future[LDAPConfigTestResult] = {
      helper.testLdapConfigUserInfo(body)
  }

  /**
   * Update LDAP Configuration
   * ### Update the LDAP configuration.  Configuring LDAP impacts authentication for all users. This configuration should be done carefully.  Only Looker administrators can read and update the LDAP configuration.  LDAP is enabled or disabled for Looker using the **enabled** field.  It is **highly** recommended that any LDAP setting changes be tested using the APIs below before being set globally.  See the [Looker LDAP docs](https://www.looker.com/docs/r/api/ldap_setup) for additional information. 
   *
   * @param body LDAP Config 
   * @return LDAPConfig
   */
  def updateLdapConfig(body: LDAPConfig): Option[LDAPConfig] = {
    val await = Try(Await.result(updateLdapConfigAsync(body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Update LDAP Configuration asynchronously
   * ### Update the LDAP configuration.  Configuring LDAP impacts authentication for all users. This configuration should be done carefully.  Only Looker administrators can read and update the LDAP configuration.  LDAP is enabled or disabled for Looker using the **enabled** field.  It is **highly** recommended that any LDAP setting changes be tested using the APIs below before being set globally.  See the [Looker LDAP docs](https://www.looker.com/docs/r/api/ldap_setup) for additional information. 
   *
   * @param body LDAP Config 
   * @return Future(LDAPConfig)
   */
  def updateLdapConfigAsync(body: LDAPConfig): Future[LDAPConfig] = {
      helper.updateLdapConfig(body)
  }

  /**
   * Update OIDC Configuration
   * ### Update the OIDC configuration.  Configuring OIDC impacts authentication for all users. This configuration should be done carefully.  Only Looker administrators can read and update the OIDC configuration.  OIDC is enabled or disabled for Looker using the **enabled** field.  It is **highly** recommended that any OIDC setting changes be tested using the APIs below before being set globally. 
   *
   * @param body OIDC Config 
   * @return OIDCConfig
   */
  def updateOidcConfig(body: OIDCConfig): Option[OIDCConfig] = {
    val await = Try(Await.result(updateOidcConfigAsync(body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Update OIDC Configuration asynchronously
   * ### Update the OIDC configuration.  Configuring OIDC impacts authentication for all users. This configuration should be done carefully.  Only Looker administrators can read and update the OIDC configuration.  OIDC is enabled or disabled for Looker using the **enabled** field.  It is **highly** recommended that any OIDC setting changes be tested using the APIs below before being set globally. 
   *
   * @param body OIDC Config 
   * @return Future(OIDCConfig)
   */
  def updateOidcConfigAsync(body: OIDCConfig): Future[OIDCConfig] = {
      helper.updateOidcConfig(body)
  }

  /**
   * Update SAML Configuration
   * ### Update the SAML configuration.  Configuring SAML impacts authentication for all users. This configuration should be done carefully.  Only Looker administrators can read and update the SAML configuration.  SAML is enabled or disabled for Looker using the **enabled** field.  It is **highly** recommended that any SAML setting changes be tested using the APIs below before being set globally. 
   *
   * @param body SAML Config 
   * @return SamlConfig
   */
  def updateSamlConfig(body: SamlConfig): Option[SamlConfig] = {
    val await = Try(Await.result(updateSamlConfigAsync(body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Update SAML Configuration asynchronously
   * ### Update the SAML configuration.  Configuring SAML impacts authentication for all users. This configuration should be done carefully.  Only Looker administrators can read and update the SAML configuration.  SAML is enabled or disabled for Looker using the **enabled** field.  It is **highly** recommended that any SAML setting changes be tested using the APIs below before being set globally. 
   *
   * @param body SAML Config 
   * @return Future(SamlConfig)
   */
  def updateSamlConfigAsync(body: SamlConfig): Future[SamlConfig] = {
      helper.updateSamlConfig(body)
  }

}

class AuthApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def createOidcTestConfig(body: OIDCConfig)(implicit reader: ClientResponseReader[OIDCConfig], writer: RequestWriter[OIDCConfig]): Future[OIDCConfig] = {
    // create path and map variables
    val path = (addFmt("/oidc_test_configs"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling AuthApi->createOidcTestConfig")

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def createSamlTestConfig(body: SamlConfig)(implicit reader: ClientResponseReader[SamlConfig], writer: RequestWriter[SamlConfig]): Future[SamlConfig] = {
    // create path and map variables
    val path = (addFmt("/saml_test_configs"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling AuthApi->createSamlTestConfig")

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def deleteOidcTestConfig(testSlug: String)(implicit reader: ClientResponseReader[String]): Future[String] = {
    // create path and map variables
    val path = (addFmt("/oidc_test_configs/{test_slug}")
      replaceAll("\\{" + "test_slug" + "\\}", testSlug.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (testSlug == null) throw new Exception("Missing required parameter 'testSlug' when calling AuthApi->deleteOidcTestConfig")


    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def deleteSamlTestConfig(testSlug: String)(implicit reader: ClientResponseReader[String]): Future[String] = {
    // create path and map variables
    val path = (addFmt("/saml_test_configs/{test_slug}")
      replaceAll("\\{" + "test_slug" + "\\}", testSlug.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (testSlug == null) throw new Exception("Missing required parameter 'testSlug' when calling AuthApi->deleteSamlTestConfig")


    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def fetchAndParseSamlIdpMetadata(body: String)(implicit reader: ClientResponseReader[SamlMetadataParseResult], writer: RequestWriter[String]): Future[SamlMetadataParseResult] = {
    // create path and map variables
    val path = (addFmt("/fetch_and_parse_saml_idp_metadata"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling AuthApi->fetchAndParseSamlIdpMetadata")


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def ldapConfig()(implicit reader: ClientResponseReader[LDAPConfig]): Future[LDAPConfig] = {
    // create path and map variables
    val path = (addFmt("/ldap_config"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def oidcConfig()(implicit reader: ClientResponseReader[OIDCConfig]): Future[OIDCConfig] = {
    // create path and map variables
    val path = (addFmt("/oidc_config"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def oidcTestConfig(testSlug: String)(implicit reader: ClientResponseReader[OIDCConfig]): Future[OIDCConfig] = {
    // create path and map variables
    val path = (addFmt("/oidc_test_configs/{test_slug}")
      replaceAll("\\{" + "test_slug" + "\\}", testSlug.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (testSlug == null) throw new Exception("Missing required parameter 'testSlug' when calling AuthApi->oidcTestConfig")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def parseSamlIdpMetadata(body: String)(implicit reader: ClientResponseReader[SamlMetadataParseResult], writer: RequestWriter[String]): Future[SamlMetadataParseResult] = {
    // create path and map variables
    val path = (addFmt("/parse_saml_idp_metadata"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling AuthApi->parseSamlIdpMetadata")


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def samlConfig()(implicit reader: ClientResponseReader[SamlConfig]): Future[SamlConfig] = {
    // create path and map variables
    val path = (addFmt("/saml_config"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def samlTestConfig(testSlug: String)(implicit reader: ClientResponseReader[SamlConfig]): Future[SamlConfig] = {
    // create path and map variables
    val path = (addFmt("/saml_test_configs/{test_slug}")
      replaceAll("\\{" + "test_slug" + "\\}", testSlug.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (testSlug == null) throw new Exception("Missing required parameter 'testSlug' when calling AuthApi->samlTestConfig")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def testLdapConfigAuth(body: LDAPConfig)(implicit reader: ClientResponseReader[LDAPConfigTestResult], writer: RequestWriter[LDAPConfig]): Future[LDAPConfigTestResult] = {
    // create path and map variables
    val path = (addFmt("/ldap_config/test_auth"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling AuthApi->testLdapConfigAuth")

    val resFuture = client.submit("PUT", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def testLdapConfigConnection(body: LDAPConfig)(implicit reader: ClientResponseReader[LDAPConfigTestResult], writer: RequestWriter[LDAPConfig]): Future[LDAPConfigTestResult] = {
    // create path and map variables
    val path = (addFmt("/ldap_config/test_connection"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling AuthApi->testLdapConfigConnection")

    val resFuture = client.submit("PUT", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def testLdapConfigUserAuth(body: LDAPConfig)(implicit reader: ClientResponseReader[LDAPConfigTestResult], writer: RequestWriter[LDAPConfig]): Future[LDAPConfigTestResult] = {
    // create path and map variables
    val path = (addFmt("/ldap_config/test_user_auth"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling AuthApi->testLdapConfigUserAuth")

    val resFuture = client.submit("PUT", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def testLdapConfigUserInfo(body: LDAPConfig)(implicit reader: ClientResponseReader[LDAPConfigTestResult], writer: RequestWriter[LDAPConfig]): Future[LDAPConfigTestResult] = {
    // create path and map variables
    val path = (addFmt("/ldap_config/test_user_info"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling AuthApi->testLdapConfigUserInfo")

    val resFuture = client.submit("PUT", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def updateLdapConfig(body: LDAPConfig)(implicit reader: ClientResponseReader[LDAPConfig], writer: RequestWriter[LDAPConfig]): Future[LDAPConfig] = {
    // create path and map variables
    val path = (addFmt("/ldap_config"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling AuthApi->updateLdapConfig")

    val resFuture = client.submit("PATCH", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def updateOidcConfig(body: OIDCConfig)(implicit reader: ClientResponseReader[OIDCConfig], writer: RequestWriter[OIDCConfig]): Future[OIDCConfig] = {
    // create path and map variables
    val path = (addFmt("/oidc_config"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling AuthApi->updateOidcConfig")

    val resFuture = client.submit("PATCH", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def updateSamlConfig(body: SamlConfig)(implicit reader: ClientResponseReader[SamlConfig], writer: RequestWriter[SamlConfig]): Future[SamlConfig] = {
    // create path and map variables
    val path = (addFmt("/saml_config"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling AuthApi->updateSamlConfig")

    val resFuture = client.submit("PATCH", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
