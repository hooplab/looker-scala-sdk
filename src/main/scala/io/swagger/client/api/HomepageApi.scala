/**
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api

import java.text.SimpleDateFormat

import io.swagger.client.model.Error
import io.swagger.client.model.HomepageItem
import io.swagger.client.model.HomepageSection
import io.swagger.client.model.ValidationError
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class HomepageApi(
  val defBasePath: String = "https://hoopla.eu.looker.com:19999/api/3.0",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new HomepageApiAsyncHelper(client, config)

  /**
   * Get All Homepage Items
   * ### Get information about all homepage items. 
   *
   * @param fields Requested fields. (optional)
   * @param sorts Fields to sort by. (optional)
   * @param homepageSectionId Filter to a specific homepage section (optional)
   * @return List[HomepageItem]
   */
  def allHomepageItems(fields: Option[String] = None, sorts: Option[String] = None, homepageSectionId: Option[String] = None): Option[List[HomepageItem]] = {
    val await = Try(Await.result(allHomepageItemsAsync(fields, sorts, homepageSectionId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get All Homepage Items asynchronously
   * ### Get information about all homepage items. 
   *
   * @param fields Requested fields. (optional)
   * @param sorts Fields to sort by. (optional)
   * @param homepageSectionId Filter to a specific homepage section (optional)
   * @return Future(List[HomepageItem])
   */
  def allHomepageItemsAsync(fields: Option[String] = None, sorts: Option[String] = None, homepageSectionId: Option[String] = None): Future[List[HomepageItem]] = {
      helper.allHomepageItems(fields, sorts, homepageSectionId)
  }

  /**
   * Get All Homepage sections
   * ### Get information about all homepage sections. 
   *
   * @param fields Requested fields. (optional)
   * @param sorts Fields to sort by. (optional)
   * @return List[HomepageSection]
   */
  def allHomepageSections(fields: Option[String] = None, sorts: Option[String] = None): Option[List[HomepageSection]] = {
    val await = Try(Await.result(allHomepageSectionsAsync(fields, sorts), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get All Homepage sections asynchronously
   * ### Get information about all homepage sections. 
   *
   * @param fields Requested fields. (optional)
   * @param sorts Fields to sort by. (optional)
   * @return Future(List[HomepageSection])
   */
  def allHomepageSectionsAsync(fields: Option[String] = None, sorts: Option[String] = None): Future[List[HomepageSection]] = {
      helper.allHomepageSections(fields, sorts)
  }

  /**
   * Create Homepage Item
   * ### Create a new homepage item. 
   *
   * @param body Homepage Item (optional)
   * @param fields Requested fields. (optional)
   * @return HomepageItem
   */
  def createHomepageItem(body: Option[HomepageItem] = None, fields: Option[String] = None): Option[HomepageItem] = {
    val await = Try(Await.result(createHomepageItemAsync(body, fields), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Create Homepage Item asynchronously
   * ### Create a new homepage item. 
   *
   * @param body Homepage Item (optional)
   * @param fields Requested fields. (optional)
   * @return Future(HomepageItem)
   */
  def createHomepageItemAsync(body: Option[HomepageItem] = None, fields: Option[String] = None): Future[HomepageItem] = {
      helper.createHomepageItem(body, fields)
  }

  /**
   * Create Homepage section
   * ### Create a new homepage section. 
   *
   * @param body Homepage section (optional)
   * @param fields Requested fields. (optional)
   * @return HomepageSection
   */
  def createHomepageSection(body: Option[HomepageSection] = None, fields: Option[String] = None): Option[HomepageSection] = {
    val await = Try(Await.result(createHomepageSectionAsync(body, fields), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Create Homepage section asynchronously
   * ### Create a new homepage section. 
   *
   * @param body Homepage section (optional)
   * @param fields Requested fields. (optional)
   * @return Future(HomepageSection)
   */
  def createHomepageSectionAsync(body: Option[HomepageSection] = None, fields: Option[String] = None): Future[HomepageSection] = {
      helper.createHomepageSection(body, fields)
  }

  /**
   * Delete Homepage Item
   * ### Delete a homepage item. 
   *
   * @param homepageItemId Id of homepage_item 
   * @return String
   */
  def deleteHomepageItem(homepageItemId: Long): Option[String] = {
    val await = Try(Await.result(deleteHomepageItemAsync(homepageItemId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Delete Homepage Item asynchronously
   * ### Delete a homepage item. 
   *
   * @param homepageItemId Id of homepage_item 
   * @return Future(String)
   */
  def deleteHomepageItemAsync(homepageItemId: Long): Future[String] = {
      helper.deleteHomepageItem(homepageItemId)
  }

  /**
   * Delete Homepage section
   * ### Delete a homepage section. 
   *
   * @param homepageSectionId Id of homepage_section 
   * @return String
   */
  def deleteHomepageSection(homepageSectionId: Long): Option[String] = {
    val await = Try(Await.result(deleteHomepageSectionAsync(homepageSectionId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Delete Homepage section asynchronously
   * ### Delete a homepage section. 
   *
   * @param homepageSectionId Id of homepage_section 
   * @return Future(String)
   */
  def deleteHomepageSectionAsync(homepageSectionId: Long): Future[String] = {
      helper.deleteHomepageSection(homepageSectionId)
  }

  /**
   * Get Homepage Item
   * ### Get information about a homepage item. 
   *
   * @param homepageItemId Id of homepage item 
   * @param fields Requested fields. (optional)
   * @return HomepageItem
   */
  def homepageItem(homepageItemId: Long, fields: Option[String] = None): Option[HomepageItem] = {
    val await = Try(Await.result(homepageItemAsync(homepageItemId, fields), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get Homepage Item asynchronously
   * ### Get information about a homepage item. 
   *
   * @param homepageItemId Id of homepage item 
   * @param fields Requested fields. (optional)
   * @return Future(HomepageItem)
   */
  def homepageItemAsync(homepageItemId: Long, fields: Option[String] = None): Future[HomepageItem] = {
      helper.homepageItem(homepageItemId, fields)
  }

  /**
   * Get Homepage section
   * ### Get information about a homepage section. 
   *
   * @param homepageSectionId Id of homepage section 
   * @param fields Requested fields. (optional)
   * @return HomepageSection
   */
  def homepageSection(homepageSectionId: Long, fields: Option[String] = None): Option[HomepageSection] = {
    val await = Try(Await.result(homepageSectionAsync(homepageSectionId, fields), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get Homepage section asynchronously
   * ### Get information about a homepage section. 
   *
   * @param homepageSectionId Id of homepage section 
   * @param fields Requested fields. (optional)
   * @return Future(HomepageSection)
   */
  def homepageSectionAsync(homepageSectionId: Long, fields: Option[String] = None): Future[HomepageSection] = {
      helper.homepageSection(homepageSectionId, fields)
  }

  /**
   * Update Homepage Item
   * ### Update a homepage item definition. 
   *
   * @param homepageItemId Id of homepage item 
   * @param body Homepage Item 
   * @param fields Requested fields. (optional)
   * @return HomepageItem
   */
  def updateHomepageItem(homepageItemId: Long, body: HomepageItem, fields: Option[String] = None): Option[HomepageItem] = {
    val await = Try(Await.result(updateHomepageItemAsync(homepageItemId, body, fields), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Update Homepage Item asynchronously
   * ### Update a homepage item definition. 
   *
   * @param homepageItemId Id of homepage item 
   * @param body Homepage Item 
   * @param fields Requested fields. (optional)
   * @return Future(HomepageItem)
   */
  def updateHomepageItemAsync(homepageItemId: Long, body: HomepageItem, fields: Option[String] = None): Future[HomepageItem] = {
      helper.updateHomepageItem(homepageItemId, body, fields)
  }

  /**
   * Update Homepage section
   * ### Update a homepage section definition. 
   *
   * @param homepageSectionId Id of homepage section 
   * @param body Homepage section 
   * @param fields Requested fields. (optional)
   * @return HomepageSection
   */
  def updateHomepageSection(homepageSectionId: Long, body: HomepageSection, fields: Option[String] = None): Option[HomepageSection] = {
    val await = Try(Await.result(updateHomepageSectionAsync(homepageSectionId, body, fields), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Update Homepage section asynchronously
   * ### Update a homepage section definition. 
   *
   * @param homepageSectionId Id of homepage section 
   * @param body Homepage section 
   * @param fields Requested fields. (optional)
   * @return Future(HomepageSection)
   */
  def updateHomepageSectionAsync(homepageSectionId: Long, body: HomepageSection, fields: Option[String] = None): Future[HomepageSection] = {
      helper.updateHomepageSection(homepageSectionId, body, fields)
  }

}

class HomepageApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def allHomepageItems(fields: Option[String] = None,
    sorts: Option[String] = None,
    homepageSectionId: Option[String] = None
    )(implicit reader: ClientResponseReader[List[HomepageItem]]): Future[List[HomepageItem]] = {
    // create path and map variables
    val path = (addFmt("/homepage_items"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    fields match {
      case Some(param) => queryParams += "fields" -> param.toString
      case _ => queryParams
    }
    sorts match {
      case Some(param) => queryParams += "sorts" -> param.toString
      case _ => queryParams
    }
    homepageSectionId match {
      case Some(param) => queryParams += "homepage_section_id" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def allHomepageSections(fields: Option[String] = None,
    sorts: Option[String] = None
    )(implicit reader: ClientResponseReader[List[HomepageSection]]): Future[List[HomepageSection]] = {
    // create path and map variables
    val path = (addFmt("/homepage_sections"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    fields match {
      case Some(param) => queryParams += "fields" -> param.toString
      case _ => queryParams
    }
    sorts match {
      case Some(param) => queryParams += "sorts" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def createHomepageItem(body: Option[HomepageItem] = None,
    fields: Option[String] = None
    )(implicit reader: ClientResponseReader[HomepageItem], writer: RequestWriter[Option[HomepageItem]]): Future[HomepageItem] = {
    // create path and map variables
    val path = (addFmt("/homepage_items"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    fields match {
      case Some(param) => queryParams += "fields" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def createHomepageSection(body: Option[HomepageSection] = None,
    fields: Option[String] = None
    )(implicit reader: ClientResponseReader[HomepageSection], writer: RequestWriter[Option[HomepageSection]]): Future[HomepageSection] = {
    // create path and map variables
    val path = (addFmt("/homepage_sections"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    fields match {
      case Some(param) => queryParams += "fields" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def deleteHomepageItem(homepageItemId: Long)(implicit reader: ClientResponseReader[String]): Future[String] = {
    // create path and map variables
    val path = (addFmt("/homepage_items/{homepage_item_id}")
      replaceAll("\\{" + "homepage_item_id" + "\\}", homepageItemId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def deleteHomepageSection(homepageSectionId: Long)(implicit reader: ClientResponseReader[String]): Future[String] = {
    // create path and map variables
    val path = (addFmt("/homepage_sections/{homepage_section_id}")
      replaceAll("\\{" + "homepage_section_id" + "\\}", homepageSectionId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def homepageItem(homepageItemId: Long,
    fields: Option[String] = None
    )(implicit reader: ClientResponseReader[HomepageItem]): Future[HomepageItem] = {
    // create path and map variables
    val path = (addFmt("/homepage_items/{homepage_item_id}")
      replaceAll("\\{" + "homepage_item_id" + "\\}", homepageItemId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    fields match {
      case Some(param) => queryParams += "fields" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def homepageSection(homepageSectionId: Long,
    fields: Option[String] = None
    )(implicit reader: ClientResponseReader[HomepageSection]): Future[HomepageSection] = {
    // create path and map variables
    val path = (addFmt("/homepage_sections/{homepage_section_id}")
      replaceAll("\\{" + "homepage_section_id" + "\\}", homepageSectionId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    fields match {
      case Some(param) => queryParams += "fields" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def updateHomepageItem(homepageItemId: Long,
    body: HomepageItem,
    fields: Option[String] = None
    )(implicit reader: ClientResponseReader[HomepageItem], writer: RequestWriter[HomepageItem]): Future[HomepageItem] = {
    // create path and map variables
    val path = (addFmt("/homepage_items/{homepage_item_id}")
      replaceAll("\\{" + "homepage_item_id" + "\\}", homepageItemId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling HomepageApi->updateHomepageItem")
    fields match {
      case Some(param) => queryParams += "fields" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("PATCH", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def updateHomepageSection(homepageSectionId: Long,
    body: HomepageSection,
    fields: Option[String] = None
    )(implicit reader: ClientResponseReader[HomepageSection], writer: RequestWriter[HomepageSection]): Future[HomepageSection] = {
    // create path and map variables
    val path = (addFmt("/homepage_sections/{homepage_section_id}")
      replaceAll("\\{" + "homepage_section_id" + "\\}", homepageSectionId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling HomepageApi->updateHomepageSection")
    fields match {
      case Some(param) => queryParams += "fields" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("PATCH", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
